"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var t = __importStar(require("io-ts"));
var types = __importStar(require("io-ts-types"));
var SeasonPhaseType = t.keyof({
    Regular: t.null,
    Preseason: t.null,
    Postseason: t.null,
});
var Season = t.keyof({
    '2016-2017': t.null,
    '2017-2018': t.null,
    '2018-2019': t.null,
});
var NbaTypes = /** @class */ (function () {
    function NbaTypes() {
    }
    NbaTypes.InfoType = t.type({
        seasonYear: t.string,
        seasonPhase: SeasonPhaseType,
        version: t.Integer,
        lastUpdated: types.DateFromISOString,
    }, 'NBA Info response type');
    NbaTypes.TeamType = t.keyof({
        ATL: t.null,
        PHI: t.null,
        MIA: t.null,
        DET: t.null,
        BKN: t.null,
        PHX: t.null,
        MIL: t.null,
        GSW: t.null,
        BOS: t.null,
        POR: t.null,
        MIN: t.null,
        HOU: t.null,
        CHA: t.null,
        SAC: t.null,
        NOP: t.null,
        IND: t.null,
        CHI: t.null,
        SAS: t.null,
        NYK: t.null,
        LAC: t.null,
        CLE: t.null,
        TOR: t.null,
        OKC: t.null,
        LAL: t.null,
        DAL: t.null,
        UTA: t.null,
        ORL: t.null,
        MEM: t.null,
        DEN: t.null,
        WAS: t.null,
    });
    NbaTypes.GamesResponseType = t.array(t.type({
        gameId: t.Integer,
        startTime: types.DateFromISOString,
        homeTeam: t.type({
            teamID: NbaTypes.TeamType,
            finalScore: t.Integer,
        }),
        awayTeam: t.type({
            teamID: NbaTypes.TeamType,
            finalScore: t.Integer,
        }),
        finished: t.boolean,
        seasonPhase: SeasonPhaseType,
        year: t.string,
    }), 'NBA Games response');
    NbaTypes.PlayersResponseType = t.array(t.intersection([
        t.type({
            playerId: t.Integer,
            firstName: t.string,
            lastName: t.string,
            rookieYear: t.Integer,
            lastYear: t.Integer,
            birthDate: types.DateFromISOString,
            status: t.string,
            profileUrl: t.string,
            fullName: t.string,
            team: NbaTypes.TeamType,
        }),
        t.partial({}),
    ]), 'NBA Players response');
    NbaTypes.TeamRosterResponseType = NbaTypes.PlayersResponseType;
    NbaTypes.TeamScheduleResponseType = NbaTypes.GamesResponseType;
    NbaTypes.StatsResponseType = t.array(t.type({
        playerId: t.Integer,
        min: t.Integer,
        fgm: t.Integer,
        fga: t.Integer,
        tpm: t.Integer,
        tpa: t.Integer,
        ftm: t.Integer,
        fta: t.Integer,
        plusminus: t.Integer,
        off: t.Integer,
        deff: t.Integer,
        tot: t.Integer,
        ast: t.Integer,
        pf: t.Integer,
        st: t.Integer,
        to: t.Integer,
        bs: t.Integer,
        pts: t.Integer,
    }), 'NBA stats response');
    NbaTypes.ALL_NBA_TYPES = [
        NbaTypes.GamesResponseType,
        NbaTypes.PlayersResponseType,
        NbaTypes.TeamRosterResponseType,
        NbaTypes.TeamScheduleResponseType,
        NbaTypes.StatsResponseType,
        NbaTypes.InfoType,
    ];
    return NbaTypes;
}());
exports.NbaTypes = NbaTypes;
