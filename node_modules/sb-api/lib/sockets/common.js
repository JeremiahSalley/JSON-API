"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert_never_1 = __importDefault(require("assert-never"));
var debug_1 = __importDefault(require("debug"));
var ws_1 = __importDefault(require("ws"));
var lightning_1 = require("../lightning");
var types_1 = require("../types");
var API;
(function (API) {
    API["NBA"] = "nba";
    API["spot"] = "spot";
    API["futures"] = "futures";
})(API = exports.API || (exports.API = {}));
var debug = debug_1.default('sb-api:socket:base');
var SbWebSocket = /** @class */ (function () {
    function SbWebSocket(api, ln, onOpen, network) {
        var _this = this;
        this.api = api;
        this.ln = ln;
        this.network = network;
        this.url = this.getApiUrl();
        this.closePromiseResolver = undefined;
        this.close = function () { return __awaiter(_this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve) {
                        _this.closePromiseResolver = resolve;
                        var TIMEOUT = 2500;
                        debug('Closing WS connection');
                        _this.ws.close(WS_CODENAMES.CLOSE_NORMAL);
                        setTimeout(function () {
                            if (_this.ws.readyState !== _this.ws.CLOSED) {
                                debug("WS readyState: " + _this.ws.readyState);
                                debug("WS state is not closed after " + TIMEOUT + " ms, terminating connection");
                                _this.ws.terminate();
                                debug('Terminated WS connection');
                            }
                        }, TIMEOUT);
                    })];
            });
        }); };
        this.ws = (function () {
            debug("Opening up connection at " + _this.url);
            return new ws_1.default(_this.url);
        })();
        this.ws.on('open', function () {
            debug("Opened up connection to " + _this.url);
        });
        this.ws.on('message', function (data) { return __awaiter(_this, void 0, void 0, function () {
            var parsed;
            return __generator(this, function (_a) {
                parsed = JSON.parse(data.toString());
                debug("Received message with fields: " + Object.getOwnPropertyNames(parsed).join(', '));
                if (types_1.MessageTypes.isInitMsg(parsed)) {
                    debug('Message is welcome message');
                    onOpen(parsed);
                }
                else {
                    if (!parsed.uuid) {
                        throw Error("Couldn't find UUID on message " + JSON.stringify(parsed));
                    }
                    debug('Message has UUID %s', parsed.uuid);
                    return [2 /*return*/, this.handleMessage(parsed.uuid, parsed, data)];
                }
                return [2 /*return*/];
            });
        }); });
        this.ws.on('close', function (code, reason) {
            debug("WS connection closed. Code: " + code + " (" + (WS_CODES[code] || 'Unknown code') + "). " + (reason ? 'Reason:' + reason : ''));
            var closePromiseResolver = _this.closePromiseResolver;
            if (closePromiseResolver) {
                debug('Resolving close promise');
                closePromiseResolver();
            }
        });
    }
    SbWebSocket.prototype.getApiUrl = function () {
        var prefix = "wss://" + (this.network === lightning_1.BitcoinNetwork.testnet ? 'test.' : '') + "api.suredbits.com";
        if (this.api === API.NBA) {
            return prefix + '/nba/v0';
        }
        else if (this.api === API.spot) {
            return prefix + '/exchange/v0';
        }
        else if (this.api === API.futures) {
            return prefix + '/futures/v0';
        }
        else {
            return assert_never_1.default(this.api);
        }
    };
    return SbWebSocket;
}());
exports.SbWebSocket = SbWebSocket;
var WS_CODES = {
    1000: 'Successful operation / regular socket shutdown',
    1006: 'No close code frame has been receieved',
};
var WS_CODENAMES = {
    CLOSE_NORMAL: 1000,
};
