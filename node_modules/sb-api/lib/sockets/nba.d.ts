import { LightningApi } from '../lightning';
import { NbaSeason, NbaTeamType } from '../types/nba';
import { OnWsOpen } from './common';
import { PayPerCallSocket } from './paypercall';
export declare class NbaSocket extends PayPerCallSocket {
    constructor(ln: LightningApi, onOpen: OnWsOpen);
    info: () => Promise<{
        seasonYear: string;
        seasonPhase: "Regular" | "Preseason" | "Postseason";
        version: number;
        lastUpdated: Date;
    }>;
    games: (args: NbaGamesRequestArgs) => Promise<{
        gameId: number;
        startTime: Date;
        homeTeam: {
            teamID: "ATL" | "PHI" | "MIA" | "DET" | "BKN" | "PHX" | "MIL" | "GSW" | "BOS" | "POR" | "MIN" | "HOU" | "CHA" | "SAC" | "NOP" | "IND" | "CHI" | "SAS" | "NYK" | "LAC" | "CLE" | "TOR" | "OKC" | "LAL" | "DAL" | "UTA" | "ORL" | "MEM" | "DEN" | "WAS";
            finalScore: number;
        };
        awayTeam: {
            teamID: "ATL" | "PHI" | "MIA" | "DET" | "BKN" | "PHX" | "MIL" | "GSW" | "BOS" | "POR" | "MIN" | "HOU" | "CHA" | "SAC" | "NOP" | "IND" | "CHI" | "SAS" | "NYK" | "LAC" | "CLE" | "TOR" | "OKC" | "LAL" | "DAL" | "UTA" | "ORL" | "MEM" | "DEN" | "WAS";
            finalScore: number;
        };
        finished: boolean;
        seasonPhase: "Regular" | "Preseason" | "Postseason";
        year: string;
    }[]>;
    players: (args: NbaPlayersRequestArgs) => Promise<({
        playerId: number;
        firstName: string;
        lastName: string;
        rookieYear: number;
        lastYear: number;
        birthDate: Date;
        status: string;
        profileUrl: string;
        fullName: string;
        team: "ATL" | "PHI" | "MIA" | "DET" | "BKN" | "PHX" | "MIL" | "GSW" | "BOS" | "POR" | "MIN" | "HOU" | "CHA" | "SAC" | "NOP" | "IND" | "CHI" | "SAS" | "NYK" | "LAC" | "CLE" | "TOR" | "OKC" | "LAL" | "DAL" | "UTA" | "ORL" | "MEM" | "DEN" | "WAS";
    } & {})[]>;
    schedule: (args: Pick<NbaTeamRequestArgs, "teamId" | "season">) => Promise<{
        gameId: number;
        startTime: Date;
        homeTeam: {
            teamID: "ATL" | "PHI" | "MIA" | "DET" | "BKN" | "PHX" | "MIL" | "GSW" | "BOS" | "POR" | "MIN" | "HOU" | "CHA" | "SAC" | "NOP" | "IND" | "CHI" | "SAS" | "NYK" | "LAC" | "CLE" | "TOR" | "OKC" | "LAL" | "DAL" | "UTA" | "ORL" | "MEM" | "DEN" | "WAS";
            finalScore: number;
        };
        awayTeam: {
            teamID: "ATL" | "PHI" | "MIA" | "DET" | "BKN" | "PHX" | "MIL" | "GSW" | "BOS" | "POR" | "MIN" | "HOU" | "CHA" | "SAC" | "NOP" | "IND" | "CHI" | "SAS" | "NYK" | "LAC" | "CLE" | "TOR" | "OKC" | "LAL" | "DAL" | "UTA" | "ORL" | "MEM" | "DEN" | "WAS";
            finalScore: number;
        };
        finished: boolean;
        seasonPhase: "Regular" | "Preseason" | "Postseason";
        year: string;
    }[]>;
    roster: (args: Pick<NbaTeamRequestArgs, "teamId" | "season">) => Promise<{
        gameId: number;
        startTime: Date;
        homeTeam: {
            teamID: "ATL" | "PHI" | "MIA" | "DET" | "BKN" | "PHX" | "MIL" | "GSW" | "BOS" | "POR" | "MIN" | "HOU" | "CHA" | "SAC" | "NOP" | "IND" | "CHI" | "SAS" | "NYK" | "LAC" | "CLE" | "TOR" | "OKC" | "LAL" | "DAL" | "UTA" | "ORL" | "MEM" | "DEN" | "WAS";
            finalScore: number;
        };
        awayTeam: {
            teamID: "ATL" | "PHI" | "MIA" | "DET" | "BKN" | "PHX" | "MIL" | "GSW" | "BOS" | "POR" | "MIN" | "HOU" | "CHA" | "SAC" | "NOP" | "IND" | "CHI" | "SAS" | "NYK" | "LAC" | "CLE" | "TOR" | "OKC" | "LAL" | "DAL" | "UTA" | "ORL" | "MEM" | "DEN" | "WAS";
            finalScore: number;
        };
        finished: boolean;
        seasonPhase: "Regular" | "Preseason" | "Postseason";
        year: string;
    }[]>;
    statsById: (args: NbaStatsByIdRequestArgs) => Promise<{
        playerId: number;
        min: number;
        fgm: number;
        fga: number;
        tpm: number;
        tpa: number;
        ftm: number;
        fta: number;
        plusminus: number;
        off: number;
        deff: number;
        tot: number;
        ast: number;
        pf: number;
        st: number;
        to: number;
        bs: number;
        pts: number;
    }[]>;
    statsByName: (args: NbaStatsByNameWeekRequestArgs) => Promise<{
        playerId: number;
        min: number;
        fgm: number;
        fga: number;
        tpm: number;
        tpa: number;
        ftm: number;
        fta: number;
        plusminus: number;
        off: number;
        deff: number;
        tot: number;
        ast: number;
        pf: number;
        st: number;
        to: number;
        bs: number;
        pts: number;
    }[]>;
}
export declare class NbaSocketTestnet extends PayPerCallSocket {
    constructor(ln: LightningApi, onOpen: OnWsOpen);
    info: () => Promise<{
        seasonYear: string;
        seasonPhase: "Regular" | "Preseason" | "Postseason";
        version: number;
        lastUpdated: Date;
    }>;
    games: (args: NbaGamesRequestArgs) => Promise<{
        gameId: number;
        startTime: Date;
        homeTeam: {
            teamID: "ATL" | "PHI" | "MIA" | "DET" | "BKN" | "PHX" | "MIL" | "GSW" | "BOS" | "POR" | "MIN" | "HOU" | "CHA" | "SAC" | "NOP" | "IND" | "CHI" | "SAS" | "NYK" | "LAC" | "CLE" | "TOR" | "OKC" | "LAL" | "DAL" | "UTA" | "ORL" | "MEM" | "DEN" | "WAS";
            finalScore: number;
        };
        awayTeam: {
            teamID: "ATL" | "PHI" | "MIA" | "DET" | "BKN" | "PHX" | "MIL" | "GSW" | "BOS" | "POR" | "MIN" | "HOU" | "CHA" | "SAC" | "NOP" | "IND" | "CHI" | "SAS" | "NYK" | "LAC" | "CLE" | "TOR" | "OKC" | "LAL" | "DAL" | "UTA" | "ORL" | "MEM" | "DEN" | "WAS";
            finalScore: number;
        };
        finished: boolean;
        seasonPhase: "Regular" | "Preseason" | "Postseason";
        year: string;
    }[]>;
    players: (args?: Pick<NbaPlayersRequestArgs, never>) => Promise<({
        playerId: number;
        firstName: string;
        lastName: string;
        rookieYear: number;
        lastYear: number;
        birthDate: Date;
        status: string;
        profileUrl: string;
        fullName: string;
        team: "ATL" | "PHI" | "MIA" | "DET" | "BKN" | "PHX" | "MIL" | "GSW" | "BOS" | "POR" | "MIN" | "HOU" | "CHA" | "SAC" | "NOP" | "IND" | "CHI" | "SAS" | "NYK" | "LAC" | "CLE" | "TOR" | "OKC" | "LAL" | "DAL" | "UTA" | "ORL" | "MEM" | "DEN" | "WAS";
    } & {})[]>;
    schedule: (args: Pick<Pick<NbaTeamRequestArgs, "teamId" | "season">, "teamId" | "season">) => Promise<{
        gameId: number;
        startTime: Date;
        homeTeam: {
            teamID: "ATL" | "PHI" | "MIA" | "DET" | "BKN" | "PHX" | "MIL" | "GSW" | "BOS" | "POR" | "MIN" | "HOU" | "CHA" | "SAC" | "NOP" | "IND" | "CHI" | "SAS" | "NYK" | "LAC" | "CLE" | "TOR" | "OKC" | "LAL" | "DAL" | "UTA" | "ORL" | "MEM" | "DEN" | "WAS";
            finalScore: number;
        };
        awayTeam: {
            teamID: "ATL" | "PHI" | "MIA" | "DET" | "BKN" | "PHX" | "MIL" | "GSW" | "BOS" | "POR" | "MIN" | "HOU" | "CHA" | "SAC" | "NOP" | "IND" | "CHI" | "SAS" | "NYK" | "LAC" | "CLE" | "TOR" | "OKC" | "LAL" | "DAL" | "UTA" | "ORL" | "MEM" | "DEN" | "WAS";
            finalScore: number;
        };
        finished: boolean;
        seasonPhase: "Regular" | "Preseason" | "Postseason";
        year: string;
    }[]>;
    roster: (args: Pick<Pick<NbaTeamRequestArgs, "teamId" | "season">, "teamId" | "season">) => Promise<{
        gameId: number;
        startTime: Date;
        homeTeam: {
            teamID: "ATL" | "PHI" | "MIA" | "DET" | "BKN" | "PHX" | "MIL" | "GSW" | "BOS" | "POR" | "MIN" | "HOU" | "CHA" | "SAC" | "NOP" | "IND" | "CHI" | "SAS" | "NYK" | "LAC" | "CLE" | "TOR" | "OKC" | "LAL" | "DAL" | "UTA" | "ORL" | "MEM" | "DEN" | "WAS";
            finalScore: number;
        };
        awayTeam: {
            teamID: "ATL" | "PHI" | "MIA" | "DET" | "BKN" | "PHX" | "MIL" | "GSW" | "BOS" | "POR" | "MIN" | "HOU" | "CHA" | "SAC" | "NOP" | "IND" | "CHI" | "SAS" | "NYK" | "LAC" | "CLE" | "TOR" | "OKC" | "LAL" | "DAL" | "UTA" | "ORL" | "MEM" | "DEN" | "WAS";
            finalScore: number;
        };
        finished: boolean;
        seasonPhase: "Regular" | "Preseason" | "Postseason";
        year: string;
    }[]>;
    statsById: (args: Pick<NbaStatsByIdRequestArgs, "gameId" | "playerId">) => Promise<{
        playerId: number;
        min: number;
        fgm: number;
        fga: number;
        tpm: number;
        tpa: number;
        ftm: number;
        fta: number;
        plusminus: number;
        off: number;
        deff: number;
        tot: number;
        ast: number;
        pf: number;
        st: number;
        to: number;
        bs: number;
        pts: number;
    }[]>;
    statsByName: (args: Pick<NbaStatsByNameWeekRequestArgs, "day" | "month" | "year">) => Promise<{
        playerId: number;
        min: number;
        fgm: number;
        fga: number;
        tpm: number;
        tpa: number;
        ftm: number;
        fta: number;
        plusminus: number;
        off: number;
        deff: number;
        tot: number;
        ast: number;
        pf: number;
        st: number;
        to: number;
        bs: number;
        pts: number;
    }[]>;
}
interface NbaGamesRequestArgs {
    year: number;
    month: number;
    day: number;
    teamId?: NbaTeamType;
}
interface NbaPlayersRequestArgs {
    firstName: string;
    lastName: string;
}
interface NbaTeamRequestArgs {
    teamId: NbaTeamType;
    retrieve: 'roster' | 'schedule';
    season?: NbaSeason;
}
interface NbaStatsByIdRequestArgs {
    gameId: string;
    playerId: string;
}
interface NbaStatsByNameWeekRequestArgs {
    year: number;
    month: number;
    day: number;
    firstName: string;
    lastName: string;
}
export {};
