import * as t from 'io-ts';
import { Exchange } from '../../../sockets/crypto/common';
import { FuturesExchange } from '../futures';
import { SpotExchange } from '../spot';
declare const BinanceSymbols: t.KeyofC<{
    BTCUSDT: t.NullC;
    ETHBTC: t.NullC;
    ETHUSDT: t.NullC;
}>;
declare type BinanceSymbols = t.TypeOf<typeof BinanceSymbols>;
declare const KrakenSpotSymbols: t.KeyofC<{
    ETHBTC: t.NullC;
    BTCUSD: t.NullC;
    ETHUSD: t.NullC;
}>;
declare type KrakenSpotSymbols = t.TypeOf<typeof KrakenSpotSymbols>;
declare const KrakenFuturesSymbols: t.KeyofC<{
    BTCUSD: t.NullC;
    ETHUSD: t.NullC;
}>;
declare type KrakenFuturesSymbols = t.TypeOf<typeof KrakenFuturesSymbols>;
declare const BitmexSpotSymbols: t.KeyofC<{
    shouldNotAppear: t.NullC;
}>;
declare type BitmexSpotSymbols = t.TypeOf<typeof BitmexSpotSymbols>;
declare const BitmexFuturesSymbols: t.KeyofC<{
    BTCUSD: t.NullC;
    ETHUSD: t.NullC;
    ETHBTC: t.NullC;
}>;
declare type BitmexFuturesSymbols = t.TypeOf<typeof BitmexFuturesSymbols>;
declare const BitfinexSymbols: t.KeyofC<{
    ETHBTC: t.NullC;
    BTCUSD: t.NullC;
    ETHUSD: t.NullC;
}>;
declare type BitfinexSymbols = t.TypeOf<typeof BitfinexSymbols>;
declare const CoinbaseSymbols: t.KeyofC<{
    ETHBTC: t.NullC;
    BTCUSD: t.NullC;
    ETHUSD: t.NullC;
}>;
declare type CoinbaseSymbols = t.TypeOf<typeof CoinbaseSymbols>;
declare const BitstampSymbols: t.KeyofC<{
    ETHBTC: t.NullC;
    BTCUSD: t.NullC;
    ETHUSD: t.NullC;
}>;
declare type BitstampSymbols = t.TypeOf<typeof BitstampSymbols>;
declare const GeminiSymbols: t.KeyofC<{
    BTCUSD: t.NullC;
}>;
declare type GeminiSymbols = t.TypeOf<typeof GeminiSymbols>;
export declare type ExchangeSymbols<T extends Exchange> = T extends FuturesExchange ? FuturesExchangeSymbols<T> : T extends SpotExchange ? SpotExchangeSymbols<T> : never;
export declare type ExchangeSymbol = ExchangeSymbols<'kraken'> | ExchangeSymbols<'binance'> | ExchangeSymbols<'coinbase'> | ExchangeSymbols<'bitstamp'> | ExchangeSymbols<'gemini'> | ExchangeSymbols<'bitfinex'>;
export declare type FuturesExchangeSymbols<T extends FuturesExchange> = T extends 'kraken' ? KrakenFuturesSymbols : T extends 'bitmex' ? BitmexFuturesSymbols : never;
export declare type SpotExchangeSymbol = SpotExchangeSymbols<'binance'> | SpotExchangeSymbols<'bitfinex'> | SpotExchangeSymbols<'gemini'> | SpotExchangeSymbols<'bitstamp'> | SpotExchangeSymbols<'coinbase'> | SpotExchangeSymbols<'kraken'>;
export declare type SpotExchangeSymbols<T extends SpotExchange> = T extends 'binance' ? BinanceSymbols : T extends 'bitfinex' ? BitfinexSymbols : T extends 'coinbase' ? CoinbaseSymbols : T extends 'gemini' ? GeminiSymbols : T extends 'bitstamp' ? BitstampSymbols : T extends 'kraken' ? KrakenSpotSymbols : T extends 'bitmex' ? BitmexSpotSymbols : never;
export declare const ExchangeSymbols: {
    binance: t.KeyofC<{
        BTCUSDT: t.NullC;
        ETHBTC: t.NullC;
        ETHUSDT: t.NullC;
    }>;
    bitfinex: t.KeyofC<{
        ETHBTC: t.NullC;
        BTCUSD: t.NullC;
        ETHUSD: t.NullC;
    }>;
    coinbase: t.KeyofC<{
        ETHBTC: t.NullC;
        BTCUSD: t.NullC;
        ETHUSD: t.NullC;
    }>;
    gemini: t.KeyofC<{
        BTCUSD: t.NullC;
    }>;
    bitstamp: t.KeyofC<{
        ETHBTC: t.NullC;
        BTCUSD: t.NullC;
        ETHUSD: t.NullC;
    }>;
    kraken: {
        spot: t.KeyofC<{
            ETHBTC: t.NullC;
            BTCUSD: t.NullC;
            ETHUSD: t.NullC;
        }>;
        futures: t.KeyofC<{
            BTCUSD: t.NullC;
            ETHUSD: t.NullC;
        }>;
    };
    bitmex: {
        spot: t.KeyofC<{
            shouldNotAppear: t.NullC;
        }>;
        futures: t.KeyofC<{
            BTCUSD: t.NullC;
            ETHUSD: t.NullC;
            ETHBTC: t.NullC;
        }>;
    };
};
export {};
