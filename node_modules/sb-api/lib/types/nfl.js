"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var t = __importStar(require("io-ts"));
var types = __importStar(require("io-ts-types"));
var NflTypes = /** @class */ (function () {
    function NflTypes() {
    }
    NflTypes.NflTeamType = t.keyof({
        ARI: t.null,
        LA: t.null,
        ATL: t.null,
        MIA: t.null,
        BAL: t.null,
        MIN: t.null,
        BUF: t.null,
        NE: t.null,
        CAR: t.null,
        NO: t.null,
        CHI: t.null,
        NYG: t.null,
        CIN: t.null,
        NYJ: t.null,
        CLE: t.null,
        OAK: t.null,
        DAL: t.null,
        PHI: t.null,
        DEN: t.null,
        PIT: t.null,
        DET: t.null,
        SD: t.null,
        GB: t.null,
        SEA: t.null,
        HOU: t.null,
        SF: t.null,
        IND: t.null,
        TB: t.null,
        JAC: t.null,
        TEN: t.null,
        KC: t.null,
        WAS: t.null,
        UNK: t.null,
    });
    NflTypes.PlayerType = t.intersection([
        t.type({
            playerId: t.string,
            gsisName: t.string,
            fullName: t.string,
            firstName: t.string,
            lastName: t.string,
            team: NflTypes.NflTeamType,
            position: t.string,
            profileId: t.Integer,
            profileUrl: t.string,
            college: t.string,
            height: t.Integer,
            weight: t.Integer,
            status: t.string,
        }),
        t.partial({
            birthDate: t.string,
            yearsPro: t.Integer,
        }),
    ]);
    NflTypes.WeekDays = t.keyof({
        Monday: t.null,
        Tuesday: t.null,
        Wednesday: t.null,
        Wednesda: t.null,
        Thursday: t.null,
        Friday: t.null,
        Saturday: t.null,
        Sunday: t.null,
    });
    NflTypes.SeasonTypes = t.keyof({
        Regular: t.null,
        Postseason: t.null,
        Preseason: t.null,
    });
    NflTypes.InfoType = t.type({
        version: t.string,
        lastRosterDownload: types.DateFromISOString,
        seasonType: NflTypes.SeasonTypes,
        seasonYear: t.Integer,
        week: t.string,
    });
    NflTypes.TeamWithScoresType = t.type({
        team: t.string,
        score: t.Integer,
        scoreQ1: t.Integer,
        scoreQ2: t.Integer,
        scoreQ3: t.Integer,
        scoreQ4: t.Integer,
        turnovers: t.Integer,
    });
    NflTypes.PlayersResponseType = t.array(NflTypes.PlayerType, 'NflPlayersResponseType');
    NflTypes.TeamRosterResponseType = t.array(NflTypes.PlayerType, 'NflTeamRosterResponseType');
    NflTypes.Game = t.type({
        gsisId: t.string,
        gameKey: t.string,
        startTime: types.DateFromISOString,
        week: t.string,
        dayOfWeek: NflTypes.WeekDays,
        seasonYear: t.Integer,
        seasonType: NflTypes.SeasonTypes,
        finished: t.boolean,
        homeTeam: NflTypes.TeamWithScoresType,
        awayTeam: NflTypes.TeamWithScoresType,
        timeInserted: types.DateFromISOString,
        timeUpdate: types.DateFromISOString,
    }, 'NflGame');
    NflTypes.GamesResponseType = t.array(NflTypes.Game, 'NflGamesResponseType');
    NflTypes.TeamScheduleResponseType = t.array(NflTypes.Game, 'NflTeamScheduleResponseType ');
    NflTypes.PassingStats = t.array(t.type({
        att: t.Integer,
        cmp: t.Integer,
        cmpAirYds: t.Integer,
        inCmp: t.Integer,
        inCmpAirYds: t.Integer,
        passingInt: t.Integer,
        sack: t.Integer,
        sackYds: t.Integer,
        passingTds: t.Integer,
        passingTwoPointAttempt: t.Integer,
        passingTwoPointAttemptMade: t.Integer,
        passingTwoPointAttemptMissed: t.Integer,
        passingYds: t.Integer,
    }), 'NflPassingStats');
    NflTypes.DefenseStats = t.array(t.type({
        assistedTackles: t.Integer,
        forcedFumbles: t.Integer,
        fgBlk: t.Integer,
        recoveredFumbles: t.Integer,
        recoveredFumbleTD: t.Integer,
        recoveredFumbleYds: t.Integer,
        defenseInt: t.Integer,
        intTds: t.Integer,
        intYds: t.Integer,
        miscTds: t.Integer,
        miscYds: t.Integer,
        passDef: t.Integer,
        punkBlk: t.Integer,
        qbHit: t.Integer,
        safety: t.Integer,
        defenseSack: t.Integer,
        defenseSackYds: t.Integer,
        tackle: t.Integer,
        tackleLoss: t.Integer,
        tackleLossYards: t.Integer,
        tacklePrimary: t.Integer,
        extraPointBlock: t.Integer,
    }), 'NflDefenseStats');
    NflTypes.ReceivingStats = t.array(t.type({
        rec: t.Integer,
        target: t.Integer,
        tds: t.Integer,
        receivingTwoPointAttempt: t.Integer,
        receivingTwoPointAttemptMade: t.Integer,
        receivingTwoPointAttemptMissed: t.Integer,
        yacYds: t.Integer,
        receivingYds: t.Integer,
        fumblesLost: t.Integer,
    }), 'NflReceivingStats');
    NflTypes.RushingStats = t.array(t.type({
        attempt: t.Integer,
        loss: t.Integer,
        lossYds: t.Integer,
        tds: t.Integer,
        rushingTwoPointAttempt: t.Integer,
        rushingTwoPointAttemptMade: t.Integer,
        rushingTwoPointAttemptMissed: t.Integer,
        rushingYds: t.Integer,
        fumblesLost: t.Integer,
    }), 'NflRushingStats');
    NflTypes.StatsResponsesByType = {
        defense: NflTypes.DefenseStats,
        passing: NflTypes.PassingStats,
        receiving: NflTypes.ReceivingStats,
        rushing: NflTypes.RushingStats,
    };
    NflTypes.StatsResponse = t.intersection([NflTypes.PassingStats, NflTypes.DefenseStats, NflTypes.ReceivingStats, NflTypes.RushingStats], 'NflStatsResponse');
    NflTypes.ALL_NFL_TYPES = [
        NflTypes.InfoType,
        NflTypes.GamesResponseType,
        NflTypes.PlayersResponseType,
        NflTypes.TeamRosterResponseType,
        NflTypes.TeamScheduleResponseType,
        NflTypes.PassingStats,
        NflTypes.DefenseStats,
        NflTypes.RushingStats,
        NflTypes.ReceivingStats,
    ];
    return NflTypes;
}());
exports.NflTypes = NflTypes;
