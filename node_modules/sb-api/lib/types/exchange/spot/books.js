"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var t = __importStar(require("io-ts"));
var symbols_1 = require("../common/symbols");
var CommonSpotBookFields = t.type({
    price: t.number,
});
var GeminiSpotBookFields = t.intersection([
    CommonSpotBookFields,
    t.type({
        eventTime: t.Integer,
        quantityChange: t.number,
        quantityTotal: t.number,
    }),
]);
var CoinbaseSpotBookFields = t.intersection([
    CommonSpotBookFields,
    t.type({ symbol: symbols_1.ExchangeSymbols.coinbase, quantityTotal: t.number }),
]);
var BitfinexSpotBookFields = t.intersection([
    CommonSpotBookFields,
    t.type({
        eventTime: t.number,
        orderId: t.number,
        quantityTotal: t.number,
    }),
]);
var BitstampSpotBookFields = t.intersection([
    CommonSpotBookFields,
    t.type({
        eventTime: t.Integer,
        orderId: t.Integer,
        quantityChange: t.number,
    }),
]);
var BinanceSpotBookFields = t.intersection([
    CommonSpotBookFields,
    t.type({
        eventTime: t.Integer,
        quantityTotal: t.number,
        symbol: symbols_1.ExchangeSymbols.binance,
    }),
]);
var KrakenSpotBookFields = t.type({}); // Kraken spot does not support books
exports.ExchangeSpotBooksTypes = {
    bitfinex: {
        data: t.refinement(BitfinexSpotBookFields, function () { return true; }, 'BitfinexSpotBooksDataType'),
        snapshot: t.array(BitfinexSpotBookFields, 'BitfinexSpotBooksSnapshotType'),
    },
    binance: {
        data: t.refinement(BinanceSpotBookFields, function () { return true; }, 'BinanceSpotBooksDataType'),
        snapshot: t.array(BinanceSpotBookFields, 'BinanceSpotBooksSnapshotType'),
    },
    coinbase: {
        data: t.refinement(CoinbaseSpotBookFields, function () { return true; }, 'CoinbaseSpotBooksDataType'),
        snapshot: t.array(CoinbaseSpotBookFields, 'CoinbaseSpotBooksSnapshotType'),
    },
    gemini: {
        data: t.refinement(GeminiSpotBookFields, function () { return true; }, 'GeminiSpotBooksDataType'),
        snapshot: t.array(GeminiSpotBookFields, 'GeminiSpotBooksSnapshotType'),
    },
    bitstamp: {
        data: t.refinement(BitstampSpotBookFields, function () { return true; }, 'BitstampSpotBookDataType'),
        snapshot: t.array(BitstampSpotBookFields, 'BitstampSpotBookSnapshotType'),
    },
    kraken: {
        data: t.refinement(KrakenSpotBookFields, function () { return true; }, 'KrakenSpotBooksDataType'),
        snapshot: t.array(KrakenSpotBookFields, 'KrakenSpotBooksSnapshotType'),
    },
    bitmex: {
        data: t.type({}),
        snapshot: t.array(t.type({})),
    },
};
exports.ALL_SPOT_BOOKS_DATA_TYPES = [
    exports.ExchangeSpotBooksTypes.bitfinex.data,
    exports.ExchangeSpotBooksTypes.coinbase.data,
    exports.ExchangeSpotBooksTypes.binance.data,
    exports.ExchangeSpotBooksTypes.gemini.data,
    exports.ExchangeSpotBooksTypes.bitstamp.data,
    exports.ExchangeSpotBooksTypes.kraken.data,
];
