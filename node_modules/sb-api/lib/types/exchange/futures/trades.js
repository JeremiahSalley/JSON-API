"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var t = __importStar(require("io-ts"));
var io_ts_types_1 = require("io-ts-types");
var symbols_1 = require("../common/symbols");
var common_1 = require("./common");
var CommonFuturesTradeFields = t.intersection([
    t.type({
        tradeTime: t.Integer,
        marketMaker: t.boolean,
        price: t.number,
        quantity: t.Int,
    }),
    t.partial({
        /**
         * Only present for non-perpetual futures
         */
        maturationTime: t.Integer,
    }),
]);
var BitmexFuturesTradeFields = t.intersection([
    CommonFuturesTradeFields,
    t.type({
        symbol: symbols_1.ExchangeSymbols.bitmex.futures,
        tradeId: io_ts_types_1.uuid,
        grossValue: t.Integer,
        homeNotional: t.number,
        foreignNotional: t.number,
    }),
]);
var KrakenFuturesTradeFields = t.intersection([
    CommonFuturesTradeFields,
    t.type({
        symbol: symbols_1.ExchangeSymbols.kraken.futures,
    }),
    t.partial({
        reason: common_1.FuturesTradeReason,
    }),
]);
exports.ExchangeFuturesTradesTypes = {
    kraken: {
        data: t.refinement(KrakenFuturesTradeFields, function () { return true; }, 'KrakenFuturesTradesDataType'),
        snapshot: t.array(KrakenFuturesTradeFields, 'KrakenFuturesTradesSnapshotType'),
    },
    bitmex: {
        data: t.refinement(BitmexFuturesTradeFields, function () { return true; }, 'BitmexFuturesTradesFields'),
        snapshot: t.array(BitmexFuturesTradeFields, 'BitmexFuturesTradesSnapshot'),
    },
};
exports.ALL_FUTURES_TRADES_DATA_TYPES = [
    exports.ExchangeFuturesTradesTypes.kraken.data,
    exports.ExchangeFuturesTradesTypes.bitmex.data,
];
