"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var t = __importStar(require("io-ts"));
var lightning_1 = require("../../lightning");
var futures_1 = require("../../types/exchange/futures");
var common_1 = require("../common");
var common_2 = require("./common");
exports.KrakenMaturationInterval = t.keyof({ monthly: t.null, quarterly: t.null, perpetual: t.null });
exports.BitmexMaturationIntervalBTCUSD = t.keyof({ quarterly: t.null, perpetual: t.null, biquarterly: t.null });
exports.BitmexMaturationIntervalETHUSD = t.keyof({ perpetual: t.null });
exports.BitmexMaturationIntervalETHBTC = t.keyof({ monthly: t.null });
var ExchangeFuturesSocket = /** @class */ (function (_super) {
    __extends(ExchangeFuturesSocket, _super);
    function ExchangeFuturesSocket(ln, onOpen) {
        var _this = _super.call(this, ln, lightning_1.BitcoinNetwork.mainnet, common_1.API.futures, onOpen) || this;
        _this.ln = ln;
        _this.checkChannelAndExchange = function (channel, exchange) {
            return;
        };
        _this.getTypes = function (channel, exchange) {
            return futures_1.ExchangeFuturesTypes.DataTypes[channel][exchange];
        };
        _this.tickers = function (args) { return _this.subscribe(__assign({ channel: 'tickers' }, args)); };
        _this.books = function (args) { return _this.subscribe(__assign({ channel: 'books' }, args)); };
        _this.trades = function (args) { return _this.subscribe(__assign({ channel: 'trades' }, args)); };
        return _this;
    }
    return ExchangeFuturesSocket;
}(common_2.ExchangeSocketBase));
exports.ExchangeFuturesSocket = ExchangeFuturesSocket;
var ExchangeFuturesSocketTestnet = /** @class */ (function (_super) {
    __extends(ExchangeFuturesSocketTestnet, _super);
    function ExchangeFuturesSocketTestnet(ln, onOpen) {
        var _this = _super.call(this, ln, lightning_1.BitcoinNetwork.testnet, common_1.API.futures, onOpen) || this;
        _this.ln = ln;
        _this.checkChannelAndExchange = function (channel, exchange) {
            return;
        };
        _this.doesExchangeSupportFutures = function (exchange) { return exchange === 'kraken'; };
        _this.getTypes = function (channel, exchange) {
            if (_this.doesExchangeSupportFutures(exchange)) {
                return futures_1.ExchangeFuturesTypes.DataTypes[channel][exchange];
            }
            else {
                throw TypeError(exchange + " does not have a futures market!");
            }
        };
        _this.tickers = function (args) {
            return _this.subscribe(__assign({ channel: 'tickers', symbol: 'BTCUSD' }, args));
        };
        _this.books = function (args) {
            return _this.subscribe(__assign({ channel: 'books', symbol: 'BTCUSD' }, args));
        };
        _this.trades = function (args) {
            return _this.subscribe(__assign({ channel: 'trades', symbol: 'BTCUSD' }, args));
        };
        return _this;
    }
    return ExchangeFuturesSocketTestnet;
}(common_2.ExchangeSocketBase));
exports.ExchangeFuturesSocketTestnet = ExchangeFuturesSocketTestnet;
