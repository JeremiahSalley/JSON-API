import * as t from 'io-ts';
import * as types from 'io-ts-types';
import { StatType } from '../rest/nfl';
export declare type NflTeamType = t.TypeOf<typeof NflTypes.NflTeamType>;
export declare type NflGamesResponseType = t.TypeOf<typeof NflTypes.GamesResponseType>;
export declare type NflPlayerResponseType = t.TypeOf<typeof NflTypes.PlayersResponseType>;
export declare type NflScheduleResponseType = t.TypeOf<typeof NflTypes.TeamScheduleResponseType>;
export declare type NflRosterResponseType = t.TypeOf<typeof NflTypes.TeamRosterResponseType>;
export declare type NflStatsResponse<T extends StatType> = t.TypeOf<typeof NflTypes.StatsResponsesByType[T]>;
export declare type NflInfoResponse = t.TypeOf<typeof NflTypes.InfoType>;
export declare class NflTypes {
    static NflTeamType: t.KeyofC<{
        ARI: t.NullC;
        LA: t.NullC;
        ATL: t.NullC;
        MIA: t.NullC;
        BAL: t.NullC;
        MIN: t.NullC;
        BUF: t.NullC;
        NE: t.NullC;
        CAR: t.NullC;
        NO: t.NullC;
        CHI: t.NullC;
        NYG: t.NullC;
        CIN: t.NullC;
        NYJ: t.NullC;
        CLE: t.NullC;
        OAK: t.NullC;
        DAL: t.NullC;
        PHI: t.NullC;
        DEN: t.NullC;
        PIT: t.NullC;
        DET: t.NullC;
        SD: t.NullC;
        GB: t.NullC;
        SEA: t.NullC;
        HOU: t.NullC;
        SF: t.NullC;
        IND: t.NullC;
        TB: t.NullC;
        JAC: t.NullC;
        TEN: t.NullC;
        KC: t.NullC;
        WAS: t.NullC;
        UNK: t.NullC;
    }>;
    private static PlayerType;
    private static WeekDays;
    private static SeasonTypes;
    static InfoType: t.TypeC<{
        version: t.StringC;
        lastRosterDownload: types.DateFromISOStringC;
        seasonType: t.KeyofC<{
            Regular: t.NullC;
            Postseason: t.NullC;
            Preseason: t.NullC;
        }>;
        seasonYear: t.RefinementC<t.NumberC>;
        week: t.StringC;
    }>;
    private static TeamWithScoresType;
    static PlayersResponseType: t.ArrayC<t.IntersectionC<[t.TypeC<{
        playerId: t.StringC;
        gsisName: t.StringC;
        fullName: t.StringC;
        firstName: t.StringC;
        lastName: t.StringC;
        team: t.KeyofC<{
            ARI: t.NullC;
            LA: t.NullC;
            ATL: t.NullC;
            MIA: t.NullC;
            BAL: t.NullC;
            MIN: t.NullC;
            BUF: t.NullC;
            NE: t.NullC;
            CAR: t.NullC;
            NO: t.NullC;
            CHI: t.NullC;
            NYG: t.NullC;
            CIN: t.NullC;
            NYJ: t.NullC;
            CLE: t.NullC;
            OAK: t.NullC;
            DAL: t.NullC;
            PHI: t.NullC;
            DEN: t.NullC;
            PIT: t.NullC;
            DET: t.NullC;
            SD: t.NullC;
            GB: t.NullC;
            SEA: t.NullC;
            HOU: t.NullC;
            SF: t.NullC;
            IND: t.NullC;
            TB: t.NullC;
            JAC: t.NullC;
            TEN: t.NullC;
            KC: t.NullC;
            WAS: t.NullC;
            UNK: t.NullC;
        }>;
        position: t.StringC;
        profileId: t.RefinementC<t.NumberC>;
        profileUrl: t.StringC;
        college: t.StringC;
        height: t.RefinementC<t.NumberC>;
        weight: t.RefinementC<t.NumberC>;
        status: t.StringC;
    }>, t.PartialC<{
        birthDate: t.StringC;
        yearsPro: t.RefinementC<t.NumberC>;
    }>]>>;
    static TeamRosterResponseType: t.ArrayC<t.IntersectionC<[t.TypeC<{
        playerId: t.StringC;
        gsisName: t.StringC;
        fullName: t.StringC;
        firstName: t.StringC;
        lastName: t.StringC;
        team: t.KeyofC<{
            ARI: t.NullC;
            LA: t.NullC;
            ATL: t.NullC;
            MIA: t.NullC;
            BAL: t.NullC;
            MIN: t.NullC;
            BUF: t.NullC;
            NE: t.NullC;
            CAR: t.NullC;
            NO: t.NullC;
            CHI: t.NullC;
            NYG: t.NullC;
            CIN: t.NullC;
            NYJ: t.NullC;
            CLE: t.NullC;
            OAK: t.NullC;
            DAL: t.NullC;
            PHI: t.NullC;
            DEN: t.NullC;
            PIT: t.NullC;
            DET: t.NullC;
            SD: t.NullC;
            GB: t.NullC;
            SEA: t.NullC;
            HOU: t.NullC;
            SF: t.NullC;
            IND: t.NullC;
            TB: t.NullC;
            JAC: t.NullC;
            TEN: t.NullC;
            KC: t.NullC;
            WAS: t.NullC;
            UNK: t.NullC;
        }>;
        position: t.StringC;
        profileId: t.RefinementC<t.NumberC>;
        profileUrl: t.StringC;
        college: t.StringC;
        height: t.RefinementC<t.NumberC>;
        weight: t.RefinementC<t.NumberC>;
        status: t.StringC;
    }>, t.PartialC<{
        birthDate: t.StringC;
        yearsPro: t.RefinementC<t.NumberC>;
    }>]>>;
    static Game: t.TypeC<{
        gsisId: t.StringC;
        gameKey: t.StringC;
        startTime: types.DateFromISOStringC;
        week: t.StringC;
        dayOfWeek: t.KeyofC<{
            Monday: t.NullC;
            Tuesday: t.NullC;
            Wednesday: t.NullC;
            Wednesda: t.NullC;
            Thursday: t.NullC;
            Friday: t.NullC;
            Saturday: t.NullC;
            Sunday: t.NullC;
        }>;
        seasonYear: t.RefinementC<t.NumberC>;
        seasonType: t.KeyofC<{
            Regular: t.NullC;
            Postseason: t.NullC;
            Preseason: t.NullC;
        }>;
        finished: t.BooleanC;
        homeTeam: t.TypeC<{
            team: t.StringC;
            score: t.RefinementC<t.NumberC>;
            scoreQ1: t.RefinementC<t.NumberC>;
            scoreQ2: t.RefinementC<t.NumberC>;
            scoreQ3: t.RefinementC<t.NumberC>;
            scoreQ4: t.RefinementC<t.NumberC>;
            turnovers: t.RefinementC<t.NumberC>;
        }>;
        awayTeam: t.TypeC<{
            team: t.StringC;
            score: t.RefinementC<t.NumberC>;
            scoreQ1: t.RefinementC<t.NumberC>;
            scoreQ2: t.RefinementC<t.NumberC>;
            scoreQ3: t.RefinementC<t.NumberC>;
            scoreQ4: t.RefinementC<t.NumberC>;
            turnovers: t.RefinementC<t.NumberC>;
        }>;
        timeInserted: types.DateFromISOStringC;
        timeUpdate: types.DateFromISOStringC;
    }>;
    static GamesResponseType: t.ArrayC<t.TypeC<{
        gsisId: t.StringC;
        gameKey: t.StringC;
        startTime: types.DateFromISOStringC;
        week: t.StringC;
        dayOfWeek: t.KeyofC<{
            Monday: t.NullC;
            Tuesday: t.NullC;
            Wednesday: t.NullC;
            Wednesda: t.NullC;
            Thursday: t.NullC;
            Friday: t.NullC;
            Saturday: t.NullC;
            Sunday: t.NullC;
        }>;
        seasonYear: t.RefinementC<t.NumberC>;
        seasonType: t.KeyofC<{
            Regular: t.NullC;
            Postseason: t.NullC;
            Preseason: t.NullC;
        }>;
        finished: t.BooleanC;
        homeTeam: t.TypeC<{
            team: t.StringC;
            score: t.RefinementC<t.NumberC>;
            scoreQ1: t.RefinementC<t.NumberC>;
            scoreQ2: t.RefinementC<t.NumberC>;
            scoreQ3: t.RefinementC<t.NumberC>;
            scoreQ4: t.RefinementC<t.NumberC>;
            turnovers: t.RefinementC<t.NumberC>;
        }>;
        awayTeam: t.TypeC<{
            team: t.StringC;
            score: t.RefinementC<t.NumberC>;
            scoreQ1: t.RefinementC<t.NumberC>;
            scoreQ2: t.RefinementC<t.NumberC>;
            scoreQ3: t.RefinementC<t.NumberC>;
            scoreQ4: t.RefinementC<t.NumberC>;
            turnovers: t.RefinementC<t.NumberC>;
        }>;
        timeInserted: types.DateFromISOStringC;
        timeUpdate: types.DateFromISOStringC;
    }>>;
    static TeamScheduleResponseType: t.ArrayC<t.TypeC<{
        gsisId: t.StringC;
        gameKey: t.StringC;
        startTime: types.DateFromISOStringC;
        week: t.StringC;
        dayOfWeek: t.KeyofC<{
            Monday: t.NullC;
            Tuesday: t.NullC;
            Wednesday: t.NullC;
            Wednesda: t.NullC;
            Thursday: t.NullC;
            Friday: t.NullC;
            Saturday: t.NullC;
            Sunday: t.NullC;
        }>;
        seasonYear: t.RefinementC<t.NumberC>;
        seasonType: t.KeyofC<{
            Regular: t.NullC;
            Postseason: t.NullC;
            Preseason: t.NullC;
        }>;
        finished: t.BooleanC;
        homeTeam: t.TypeC<{
            team: t.StringC;
            score: t.RefinementC<t.NumberC>;
            scoreQ1: t.RefinementC<t.NumberC>;
            scoreQ2: t.RefinementC<t.NumberC>;
            scoreQ3: t.RefinementC<t.NumberC>;
            scoreQ4: t.RefinementC<t.NumberC>;
            turnovers: t.RefinementC<t.NumberC>;
        }>;
        awayTeam: t.TypeC<{
            team: t.StringC;
            score: t.RefinementC<t.NumberC>;
            scoreQ1: t.RefinementC<t.NumberC>;
            scoreQ2: t.RefinementC<t.NumberC>;
            scoreQ3: t.RefinementC<t.NumberC>;
            scoreQ4: t.RefinementC<t.NumberC>;
            turnovers: t.RefinementC<t.NumberC>;
        }>;
        timeInserted: types.DateFromISOStringC;
        timeUpdate: types.DateFromISOStringC;
    }>>;
    static PassingStats: t.ArrayC<t.TypeC<{
        att: t.RefinementC<t.NumberC>;
        cmp: t.RefinementC<t.NumberC>;
        cmpAirYds: t.RefinementC<t.NumberC>;
        inCmp: t.RefinementC<t.NumberC>;
        inCmpAirYds: t.RefinementC<t.NumberC>;
        passingInt: t.RefinementC<t.NumberC>;
        sack: t.RefinementC<t.NumberC>;
        sackYds: t.RefinementC<t.NumberC>;
        passingTds: t.RefinementC<t.NumberC>;
        passingTwoPointAttempt: t.RefinementC<t.NumberC>;
        passingTwoPointAttemptMade: t.RefinementC<t.NumberC>;
        passingTwoPointAttemptMissed: t.RefinementC<t.NumberC>;
        passingYds: t.RefinementC<t.NumberC>;
    }>>;
    static DefenseStats: t.ArrayC<t.TypeC<{
        assistedTackles: t.RefinementC<t.NumberC>;
        forcedFumbles: t.RefinementC<t.NumberC>;
        fgBlk: t.RefinementC<t.NumberC>;
        recoveredFumbles: t.RefinementC<t.NumberC>;
        recoveredFumbleTD: t.RefinementC<t.NumberC>;
        recoveredFumbleYds: t.RefinementC<t.NumberC>;
        defenseInt: t.RefinementC<t.NumberC>;
        intTds: t.RefinementC<t.NumberC>;
        intYds: t.RefinementC<t.NumberC>;
        miscTds: t.RefinementC<t.NumberC>;
        miscYds: t.RefinementC<t.NumberC>;
        passDef: t.RefinementC<t.NumberC>;
        punkBlk: t.RefinementC<t.NumberC>;
        qbHit: t.RefinementC<t.NumberC>;
        safety: t.RefinementC<t.NumberC>;
        defenseSack: t.RefinementC<t.NumberC>;
        defenseSackYds: t.RefinementC<t.NumberC>;
        tackle: t.RefinementC<t.NumberC>;
        tackleLoss: t.RefinementC<t.NumberC>;
        tackleLossYards: t.RefinementC<t.NumberC>;
        tacklePrimary: t.RefinementC<t.NumberC>;
        extraPointBlock: t.RefinementC<t.NumberC>;
    }>>;
    static ReceivingStats: t.ArrayC<t.TypeC<{
        rec: t.RefinementC<t.NumberC>;
        target: t.RefinementC<t.NumberC>;
        tds: t.RefinementC<t.NumberC>;
        receivingTwoPointAttempt: t.RefinementC<t.NumberC>;
        receivingTwoPointAttemptMade: t.RefinementC<t.NumberC>;
        receivingTwoPointAttemptMissed: t.RefinementC<t.NumberC>;
        yacYds: t.RefinementC<t.NumberC>;
        receivingYds: t.RefinementC<t.NumberC>;
        fumblesLost: t.RefinementC<t.NumberC>;
    }>>;
    static RushingStats: t.ArrayC<t.TypeC<{
        attempt: t.RefinementC<t.NumberC>;
        loss: t.RefinementC<t.NumberC>;
        lossYds: t.RefinementC<t.NumberC>;
        tds: t.RefinementC<t.NumberC>;
        rushingTwoPointAttempt: t.RefinementC<t.NumberC>;
        rushingTwoPointAttemptMade: t.RefinementC<t.NumberC>;
        rushingTwoPointAttemptMissed: t.RefinementC<t.NumberC>;
        rushingYds: t.RefinementC<t.NumberC>;
        fumblesLost: t.RefinementC<t.NumberC>;
    }>>;
    static StatsResponsesByType: {
        defense: t.ArrayC<t.TypeC<{
            assistedTackles: t.RefinementC<t.NumberC>;
            forcedFumbles: t.RefinementC<t.NumberC>;
            fgBlk: t.RefinementC<t.NumberC>;
            recoveredFumbles: t.RefinementC<t.NumberC>;
            recoveredFumbleTD: t.RefinementC<t.NumberC>;
            recoveredFumbleYds: t.RefinementC<t.NumberC>;
            defenseInt: t.RefinementC<t.NumberC>;
            intTds: t.RefinementC<t.NumberC>;
            intYds: t.RefinementC<t.NumberC>;
            miscTds: t.RefinementC<t.NumberC>;
            miscYds: t.RefinementC<t.NumberC>;
            passDef: t.RefinementC<t.NumberC>;
            punkBlk: t.RefinementC<t.NumberC>;
            qbHit: t.RefinementC<t.NumberC>;
            safety: t.RefinementC<t.NumberC>;
            defenseSack: t.RefinementC<t.NumberC>;
            defenseSackYds: t.RefinementC<t.NumberC>;
            tackle: t.RefinementC<t.NumberC>;
            tackleLoss: t.RefinementC<t.NumberC>;
            tackleLossYards: t.RefinementC<t.NumberC>;
            tacklePrimary: t.RefinementC<t.NumberC>;
            extraPointBlock: t.RefinementC<t.NumberC>;
        }>>;
        passing: t.ArrayC<t.TypeC<{
            att: t.RefinementC<t.NumberC>;
            cmp: t.RefinementC<t.NumberC>;
            cmpAirYds: t.RefinementC<t.NumberC>;
            inCmp: t.RefinementC<t.NumberC>;
            inCmpAirYds: t.RefinementC<t.NumberC>;
            passingInt: t.RefinementC<t.NumberC>;
            sack: t.RefinementC<t.NumberC>;
            sackYds: t.RefinementC<t.NumberC>;
            passingTds: t.RefinementC<t.NumberC>;
            passingTwoPointAttempt: t.RefinementC<t.NumberC>;
            passingTwoPointAttemptMade: t.RefinementC<t.NumberC>;
            passingTwoPointAttemptMissed: t.RefinementC<t.NumberC>;
            passingYds: t.RefinementC<t.NumberC>;
        }>>;
        receiving: t.ArrayC<t.TypeC<{
            rec: t.RefinementC<t.NumberC>;
            target: t.RefinementC<t.NumberC>;
            tds: t.RefinementC<t.NumberC>;
            receivingTwoPointAttempt: t.RefinementC<t.NumberC>;
            receivingTwoPointAttemptMade: t.RefinementC<t.NumberC>;
            receivingTwoPointAttemptMissed: t.RefinementC<t.NumberC>;
            yacYds: t.RefinementC<t.NumberC>;
            receivingYds: t.RefinementC<t.NumberC>;
            fumblesLost: t.RefinementC<t.NumberC>;
        }>>;
        rushing: t.ArrayC<t.TypeC<{
            attempt: t.RefinementC<t.NumberC>;
            loss: t.RefinementC<t.NumberC>;
            lossYds: t.RefinementC<t.NumberC>;
            tds: t.RefinementC<t.NumberC>;
            rushingTwoPointAttempt: t.RefinementC<t.NumberC>;
            rushingTwoPointAttemptMade: t.RefinementC<t.NumberC>;
            rushingTwoPointAttemptMissed: t.RefinementC<t.NumberC>;
            rushingYds: t.RefinementC<t.NumberC>;
            fumblesLost: t.RefinementC<t.NumberC>;
        }>>;
    };
    static StatsResponse: t.IntersectionC<[t.ArrayC<t.TypeC<{
        att: t.RefinementC<t.NumberC>;
        cmp: t.RefinementC<t.NumberC>;
        cmpAirYds: t.RefinementC<t.NumberC>;
        inCmp: t.RefinementC<t.NumberC>;
        inCmpAirYds: t.RefinementC<t.NumberC>;
        passingInt: t.RefinementC<t.NumberC>;
        sack: t.RefinementC<t.NumberC>;
        sackYds: t.RefinementC<t.NumberC>;
        passingTds: t.RefinementC<t.NumberC>;
        passingTwoPointAttempt: t.RefinementC<t.NumberC>;
        passingTwoPointAttemptMade: t.RefinementC<t.NumberC>;
        passingTwoPointAttemptMissed: t.RefinementC<t.NumberC>;
        passingYds: t.RefinementC<t.NumberC>;
    }>>, t.ArrayC<t.TypeC<{
        assistedTackles: t.RefinementC<t.NumberC>;
        forcedFumbles: t.RefinementC<t.NumberC>;
        fgBlk: t.RefinementC<t.NumberC>;
        recoveredFumbles: t.RefinementC<t.NumberC>;
        recoveredFumbleTD: t.RefinementC<t.NumberC>;
        recoveredFumbleYds: t.RefinementC<t.NumberC>;
        defenseInt: t.RefinementC<t.NumberC>;
        intTds: t.RefinementC<t.NumberC>;
        intYds: t.RefinementC<t.NumberC>;
        miscTds: t.RefinementC<t.NumberC>;
        miscYds: t.RefinementC<t.NumberC>;
        passDef: t.RefinementC<t.NumberC>;
        punkBlk: t.RefinementC<t.NumberC>;
        qbHit: t.RefinementC<t.NumberC>;
        safety: t.RefinementC<t.NumberC>;
        defenseSack: t.RefinementC<t.NumberC>;
        defenseSackYds: t.RefinementC<t.NumberC>;
        tackle: t.RefinementC<t.NumberC>;
        tackleLoss: t.RefinementC<t.NumberC>;
        tackleLossYards: t.RefinementC<t.NumberC>;
        tacklePrimary: t.RefinementC<t.NumberC>;
        extraPointBlock: t.RefinementC<t.NumberC>;
    }>>, t.ArrayC<t.TypeC<{
        rec: t.RefinementC<t.NumberC>;
        target: t.RefinementC<t.NumberC>;
        tds: t.RefinementC<t.NumberC>;
        receivingTwoPointAttempt: t.RefinementC<t.NumberC>;
        receivingTwoPointAttemptMade: t.RefinementC<t.NumberC>;
        receivingTwoPointAttemptMissed: t.RefinementC<t.NumberC>;
        yacYds: t.RefinementC<t.NumberC>;
        receivingYds: t.RefinementC<t.NumberC>;
        fumblesLost: t.RefinementC<t.NumberC>;
    }>>, t.ArrayC<t.TypeC<{
        attempt: t.RefinementC<t.NumberC>;
        loss: t.RefinementC<t.NumberC>;
        lossYds: t.RefinementC<t.NumberC>;
        tds: t.RefinementC<t.NumberC>;
        rushingTwoPointAttempt: t.RefinementC<t.NumberC>;
        rushingTwoPointAttemptMade: t.RefinementC<t.NumberC>;
        rushingTwoPointAttemptMissed: t.RefinementC<t.NumberC>;
        rushingYds: t.RefinementC<t.NumberC>;
        fumblesLost: t.RefinementC<t.NumberC>;
    }>>]>;
    static ALL_NFL_TYPES: (t.ArrayC<t.TypeC<{
        assistedTackles: t.RefinementC<t.NumberC>;
        forcedFumbles: t.RefinementC<t.NumberC>;
        fgBlk: t.RefinementC<t.NumberC>;
        recoveredFumbles: t.RefinementC<t.NumberC>;
        recoveredFumbleTD: t.RefinementC<t.NumberC>;
        recoveredFumbleYds: t.RefinementC<t.NumberC>;
        defenseInt: t.RefinementC<t.NumberC>;
        intTds: t.RefinementC<t.NumberC>;
        intYds: t.RefinementC<t.NumberC>;
        miscTds: t.RefinementC<t.NumberC>;
        miscYds: t.RefinementC<t.NumberC>;
        passDef: t.RefinementC<t.NumberC>;
        punkBlk: t.RefinementC<t.NumberC>;
        qbHit: t.RefinementC<t.NumberC>;
        safety: t.RefinementC<t.NumberC>;
        defenseSack: t.RefinementC<t.NumberC>;
        defenseSackYds: t.RefinementC<t.NumberC>;
        tackle: t.RefinementC<t.NumberC>;
        tackleLoss: t.RefinementC<t.NumberC>;
        tackleLossYards: t.RefinementC<t.NumberC>;
        tacklePrimary: t.RefinementC<t.NumberC>;
        extraPointBlock: t.RefinementC<t.NumberC>;
    }>> | t.ArrayC<t.TypeC<{
        att: t.RefinementC<t.NumberC>;
        cmp: t.RefinementC<t.NumberC>;
        cmpAirYds: t.RefinementC<t.NumberC>;
        inCmp: t.RefinementC<t.NumberC>;
        inCmpAirYds: t.RefinementC<t.NumberC>;
        passingInt: t.RefinementC<t.NumberC>;
        sack: t.RefinementC<t.NumberC>;
        sackYds: t.RefinementC<t.NumberC>;
        passingTds: t.RefinementC<t.NumberC>;
        passingTwoPointAttempt: t.RefinementC<t.NumberC>;
        passingTwoPointAttemptMade: t.RefinementC<t.NumberC>;
        passingTwoPointAttemptMissed: t.RefinementC<t.NumberC>;
        passingYds: t.RefinementC<t.NumberC>;
    }>> | t.ArrayC<t.TypeC<{
        rec: t.RefinementC<t.NumberC>;
        target: t.RefinementC<t.NumberC>;
        tds: t.RefinementC<t.NumberC>;
        receivingTwoPointAttempt: t.RefinementC<t.NumberC>;
        receivingTwoPointAttemptMade: t.RefinementC<t.NumberC>;
        receivingTwoPointAttemptMissed: t.RefinementC<t.NumberC>;
        yacYds: t.RefinementC<t.NumberC>;
        receivingYds: t.RefinementC<t.NumberC>;
        fumblesLost: t.RefinementC<t.NumberC>;
    }>> | t.ArrayC<t.TypeC<{
        attempt: t.RefinementC<t.NumberC>;
        loss: t.RefinementC<t.NumberC>;
        lossYds: t.RefinementC<t.NumberC>;
        tds: t.RefinementC<t.NumberC>;
        rushingTwoPointAttempt: t.RefinementC<t.NumberC>;
        rushingTwoPointAttemptMade: t.RefinementC<t.NumberC>;
        rushingTwoPointAttemptMissed: t.RefinementC<t.NumberC>;
        rushingYds: t.RefinementC<t.NumberC>;
        fumblesLost: t.RefinementC<t.NumberC>;
    }>> | t.ArrayC<t.TypeC<{
        gsisId: t.StringC;
        gameKey: t.StringC;
        startTime: types.DateFromISOStringC;
        week: t.StringC;
        dayOfWeek: t.KeyofC<{
            Monday: t.NullC;
            Tuesday: t.NullC;
            Wednesday: t.NullC;
            Wednesda: t.NullC;
            Thursday: t.NullC;
            Friday: t.NullC;
            Saturday: t.NullC;
            Sunday: t.NullC;
        }>;
        seasonYear: t.RefinementC<t.NumberC>;
        seasonType: t.KeyofC<{
            Regular: t.NullC;
            Postseason: t.NullC;
            Preseason: t.NullC;
        }>;
        finished: t.BooleanC;
        homeTeam: t.TypeC<{
            team: t.StringC;
            score: t.RefinementC<t.NumberC>;
            scoreQ1: t.RefinementC<t.NumberC>;
            scoreQ2: t.RefinementC<t.NumberC>;
            scoreQ3: t.RefinementC<t.NumberC>;
            scoreQ4: t.RefinementC<t.NumberC>;
            turnovers: t.RefinementC<t.NumberC>;
        }>;
        awayTeam: t.TypeC<{
            team: t.StringC;
            score: t.RefinementC<t.NumberC>;
            scoreQ1: t.RefinementC<t.NumberC>;
            scoreQ2: t.RefinementC<t.NumberC>;
            scoreQ3: t.RefinementC<t.NumberC>;
            scoreQ4: t.RefinementC<t.NumberC>;
            turnovers: t.RefinementC<t.NumberC>;
        }>;
        timeInserted: types.DateFromISOStringC;
        timeUpdate: types.DateFromISOStringC;
    }>> | t.ArrayC<t.IntersectionC<[t.TypeC<{
        playerId: t.StringC;
        gsisName: t.StringC;
        fullName: t.StringC;
        firstName: t.StringC;
        lastName: t.StringC;
        team: t.KeyofC<{
            ARI: t.NullC;
            LA: t.NullC;
            ATL: t.NullC;
            MIA: t.NullC;
            BAL: t.NullC;
            MIN: t.NullC;
            BUF: t.NullC;
            NE: t.NullC;
            CAR: t.NullC;
            NO: t.NullC;
            CHI: t.NullC;
            NYG: t.NullC;
            CIN: t.NullC;
            NYJ: t.NullC;
            CLE: t.NullC;
            OAK: t.NullC;
            DAL: t.NullC;
            PHI: t.NullC;
            DEN: t.NullC;
            PIT: t.NullC;
            DET: t.NullC;
            SD: t.NullC;
            GB: t.NullC;
            SEA: t.NullC;
            HOU: t.NullC;
            SF: t.NullC;
            IND: t.NullC;
            TB: t.NullC;
            JAC: t.NullC;
            TEN: t.NullC;
            KC: t.NullC;
            WAS: t.NullC;
            UNK: t.NullC;
        }>;
        position: t.StringC;
        profileId: t.RefinementC<t.NumberC>;
        profileUrl: t.StringC;
        college: t.StringC;
        height: t.RefinementC<t.NumberC>;
        weight: t.RefinementC<t.NumberC>;
        status: t.StringC;
    }>, t.PartialC<{
        birthDate: t.StringC;
        yearsPro: t.RefinementC<t.NumberC>;
    }>]>> | t.TypeC<{
        version: t.StringC;
        lastRosterDownload: types.DateFromISOStringC;
        seasonType: t.KeyofC<{
            Regular: t.NullC;
            Postseason: t.NullC;
            Preseason: t.NullC;
        }>;
        seasonYear: t.RefinementC<t.NumberC>;
        week: t.StringC;
    }>)[];
}
