import * as t from 'io-ts';
import * as types from 'io-ts-types';
import { BitcoinNetwork, LightningApi } from '../lightning';
import { Exchange } from '../sockets/crypto/common';
import { ExchangeSymbols } from '../types/exchange/common/symbols';
declare type HistoricalRestAPIPeriod = 'daily' | 'weekly' | 'monthly';
declare type HistoricalRestAPIYear = 2019 | 2018;
declare const DecryptedHistoricalResponse: t.ArrayC<t.TypeC<{
    timestamp: types.DateFromISOStringC;
    price: t.NumberC;
    pair: t.StringC;
}>>;
export declare type DecryptedHistoricalResponse = t.TypeOf<typeof DecryptedHistoricalResponse>;
interface HistoricalRestAPIArgs<E extends Exchange> {
    exchange: E;
    pair: ExchangeSymbols<E>;
    year: HistoricalRestAPIYear;
    period: HistoricalRestAPIPeriod;
    network?: BitcoinNetwork;
}
interface HistoricalRestAPI {
    call: <E extends Exchange>(args: HistoricalRestAPIArgs<E>) => Promise<DecryptedHistoricalResponse>;
}
export declare const HistoricalRestAPI: (ln: LightningApi) => HistoricalRestAPI;
export {};
