import * as t from 'io-ts';
export declare const ExchangeSpotTickersTypes: {
    binance: {
        data: t.RefinementC<t.IntersectionC<[t.TypeC<{
            bid: t.NumberC;
            ask: t.NumberC;
            symbol: t.StringC;
            volume: t.NumberC;
        }>, t.TypeC<{
            askSize: t.NumberC;
            bidSize: t.NumberC;
            close: t.NumberC;
            closeQuantity: t.NumberC;
            eventTime: t.RefinementC<t.NumberC>;
            firstTradeId: t.RefinementC<t.NumberC>;
            high: t.NumberC;
            lastTradeId: t.RefinementC<t.NumberC>;
            low: t.NumberC;
            open: t.NumberC;
            prevClose: t.NumberC;
            priceChange: t.NumberC;
            priceChangePerc: t.NumberC;
            quoteVolume: t.NumberC;
            statCloseTime: t.NumberC;
            statOpenTime: t.NumberC;
            weightedAvePrice: t.NumberC;
        }>]>>;
        snapshot: t.ArrayC<t.IntersectionC<[t.TypeC<{
            bid: t.NumberC;
            ask: t.NumberC;
            symbol: t.StringC;
            volume: t.NumberC;
        }>, t.TypeC<{
            askSize: t.NumberC;
            bidSize: t.NumberC;
            close: t.NumberC;
            closeQuantity: t.NumberC;
            eventTime: t.RefinementC<t.NumberC>;
            firstTradeId: t.RefinementC<t.NumberC>;
            high: t.NumberC;
            lastTradeId: t.RefinementC<t.NumberC>;
            low: t.NumberC;
            open: t.NumberC;
            prevClose: t.NumberC;
            priceChange: t.NumberC;
            priceChangePerc: t.NumberC;
            quoteVolume: t.NumberC;
            statCloseTime: t.NumberC;
            statOpenTime: t.NumberC;
            weightedAvePrice: t.NumberC;
        }>]>>;
    };
    bitfinex: {
        data: t.RefinementC<t.IntersectionC<[t.TypeC<{
            bid: t.NumberC;
            ask: t.NumberC;
            symbol: t.StringC;
            volume: t.NumberC;
        }>, t.TypeC<{
            eventTime: t.RefinementC<t.NumberC>;
            priceChange: t.NumberC;
            priceChangePerc: t.NumberC;
            close: t.NumberC;
            bidSize: t.NumberC;
            askSize: t.NumberC;
            high: t.NumberC;
            low: t.NumberC;
        }>]>>;
        snapshot: t.ArrayC<t.IntersectionC<[t.TypeC<{
            bid: t.NumberC;
            ask: t.NumberC;
            symbol: t.StringC;
            volume: t.NumberC;
        }>, t.TypeC<{
            eventTime: t.RefinementC<t.NumberC>;
            priceChange: t.NumberC;
            priceChangePerc: t.NumberC;
            close: t.NumberC;
            bidSize: t.NumberC;
            askSize: t.NumberC;
            high: t.NumberC;
            low: t.NumberC;
        }>]>>;
    };
    coinbase: {
        data: t.RefinementC<t.IntersectionC<[t.TypeC<{
            bid: t.NumberC;
            ask: t.NumberC;
            symbol: t.StringC;
            volume: t.NumberC;
        }>, t.TypeC<{
            eventTime: t.RefinementC<t.NumberC>;
            open: t.NumberC;
            high: t.NumberC;
            low: t.NumberC;
            lastTradeId: t.RefinementC<t.NumberC>;
        }>]>>;
        snapshot: t.ArrayC<t.IntersectionC<[t.TypeC<{
            bid: t.NumberC;
            ask: t.NumberC;
            symbol: t.StringC;
            volume: t.NumberC;
        }>, t.TypeC<{
            eventTime: t.RefinementC<t.NumberC>;
            open: t.NumberC;
            high: t.NumberC;
            low: t.NumberC;
            lastTradeId: t.RefinementC<t.NumberC>;
        }>]>>;
    };
    gemini: {
        data: t.RefinementC<t.IntersectionC<[t.TypeC<{
            bid: t.NumberC;
            ask: t.NumberC;
            symbol: t.StringC;
            volume: t.NumberC;
        }>, t.TypeC<{
            statCloseTime: t.RefinementC<t.NumberC>;
        }>]>>;
        snapshot: t.ArrayC<t.IntersectionC<[t.TypeC<{
            bid: t.NumberC;
            ask: t.NumberC;
            symbol: t.StringC;
            volume: t.NumberC;
        }>, t.TypeC<{
            statCloseTime: t.RefinementC<t.NumberC>;
        }>]>>;
    };
    bitstamp: {
        data: t.RefinementC<t.IntersectionC<[t.TypeC<{
            bid: t.NumberC;
            ask: t.NumberC;
            symbol: t.StringC;
            volume: t.NumberC;
        }>, t.TypeC<{
            eventTime: t.RefinementC<t.NumberC>;
            weightedAvePrice: t.NumberC;
            ask: t.NumberC;
            open: t.NumberC;
            high: t.NumberC;
            low: t.NumberC;
        }>]>>;
        snapshot: t.ArrayC<t.IntersectionC<[t.TypeC<{
            bid: t.NumberC;
            ask: t.NumberC;
            symbol: t.StringC;
            volume: t.NumberC;
        }>, t.TypeC<{
            eventTime: t.RefinementC<t.NumberC>;
            weightedAvePrice: t.NumberC;
            ask: t.NumberC;
            open: t.NumberC;
            high: t.NumberC;
            low: t.NumberC;
        }>]>>;
    };
    kraken: {
        data: t.RefinementC<t.IntersectionC<[t.TypeC<{
            bid: t.NumberC;
            ask: t.NumberC;
            symbol: t.StringC;
            volume: t.NumberC;
        }>, t.TypeC<{
            askSize: t.NumberC;
            bidSize: t.NumberC;
            close: t.NumberC;
            closeQuantity: t.NumberC;
            eventTime: t.RefinementC<t.NumberC>;
            high: t.NumberC;
            low: t.NumberC;
            open: t.NumberC;
            statCloseTime: t.NumberC;
            statOpenTime: t.NumberC;
            totalTrades: t.RefinementC<t.NumberC>;
            weightedAvePrice: t.NumberC;
        }>]>>;
        snapshot: t.ArrayC<t.IntersectionC<[t.TypeC<{
            bid: t.NumberC;
            ask: t.NumberC;
            symbol: t.StringC;
            volume: t.NumberC;
        }>, t.TypeC<{
            askSize: t.NumberC;
            bidSize: t.NumberC;
            close: t.NumberC;
            closeQuantity: t.NumberC;
            eventTime: t.RefinementC<t.NumberC>;
            high: t.NumberC;
            low: t.NumberC;
            open: t.NumberC;
            statCloseTime: t.NumberC;
            statOpenTime: t.NumberC;
            totalTrades: t.RefinementC<t.NumberC>;
            weightedAvePrice: t.NumberC;
        }>]>>;
    };
    bitmex: {
        data: t.TypeC<{}>;
        snapshot: t.ArrayC<t.TypeC<{}>>;
    };
};
export declare const ALL_SPOT_TICKERS_DATA_TYPES: (t.RefinementC<t.IntersectionC<[t.TypeC<{
    bid: t.NumberC;
    ask: t.NumberC;
    symbol: t.StringC;
    volume: t.NumberC;
}>, t.TypeC<{
    askSize: t.NumberC;
    bidSize: t.NumberC;
    close: t.NumberC;
    closeQuantity: t.NumberC;
    eventTime: t.RefinementC<t.NumberC>;
    firstTradeId: t.RefinementC<t.NumberC>;
    high: t.NumberC;
    lastTradeId: t.RefinementC<t.NumberC>;
    low: t.NumberC;
    open: t.NumberC;
    prevClose: t.NumberC;
    priceChange: t.NumberC;
    priceChangePerc: t.NumberC;
    quoteVolume: t.NumberC;
    statCloseTime: t.NumberC;
    statOpenTime: t.NumberC;
    weightedAvePrice: t.NumberC;
}>]>> | t.RefinementC<t.IntersectionC<[t.TypeC<{
    bid: t.NumberC;
    ask: t.NumberC;
    symbol: t.StringC;
    volume: t.NumberC;
}>, t.TypeC<{
    eventTime: t.RefinementC<t.NumberC>;
    priceChange: t.NumberC;
    priceChangePerc: t.NumberC;
    close: t.NumberC;
    bidSize: t.NumberC;
    askSize: t.NumberC;
    high: t.NumberC;
    low: t.NumberC;
}>]>> | t.RefinementC<t.IntersectionC<[t.TypeC<{
    bid: t.NumberC;
    ask: t.NumberC;
    symbol: t.StringC;
    volume: t.NumberC;
}>, t.TypeC<{
    eventTime: t.RefinementC<t.NumberC>;
    open: t.NumberC;
    high: t.NumberC;
    low: t.NumberC;
    lastTradeId: t.RefinementC<t.NumberC>;
}>]>> | t.RefinementC<t.IntersectionC<[t.TypeC<{
    bid: t.NumberC;
    ask: t.NumberC;
    symbol: t.StringC;
    volume: t.NumberC;
}>, t.TypeC<{
    statCloseTime: t.RefinementC<t.NumberC>;
}>]>> | t.RefinementC<t.IntersectionC<[t.TypeC<{
    bid: t.NumberC;
    ask: t.NumberC;
    symbol: t.StringC;
    volume: t.NumberC;
}>, t.TypeC<{
    eventTime: t.RefinementC<t.NumberC>;
    weightedAvePrice: t.NumberC;
    ask: t.NumberC;
    open: t.NumberC;
    high: t.NumberC;
    low: t.NumberC;
}>]>> | t.RefinementC<t.IntersectionC<[t.TypeC<{
    bid: t.NumberC;
    ask: t.NumberC;
    symbol: t.StringC;
    volume: t.NumberC;
}>, t.TypeC<{
    askSize: t.NumberC;
    bidSize: t.NumberC;
    close: t.NumberC;
    closeQuantity: t.NumberC;
    eventTime: t.RefinementC<t.NumberC>;
    high: t.NumberC;
    low: t.NumberC;
    open: t.NumberC;
    statCloseTime: t.NumberC;
    statOpenTime: t.NumberC;
    totalTrades: t.RefinementC<t.NumberC>;
    weightedAvePrice: t.NumberC;
}>]>>)[];
