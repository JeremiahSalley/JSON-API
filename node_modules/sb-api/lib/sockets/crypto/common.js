"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var debug_1 = __importDefault(require("debug"));
var types_1 = require("../../types");
var uuid_1 = require("../../uuid");
var common_1 = require("../common");
var debug = debug_1.default('sb-api:socket:exchange');
var ExchangeSocketBase = /** @class */ (function (_super) {
    __extends(ExchangeSocketBase, _super);
    function ExchangeSocketBase(ln, network, cryptoApi, onOpen) {
        var _this = _super.call(this, cryptoApi === 'futures' ? common_1.API.futures : common_1.API.spot, ln, onOpen, network) || this;
        _this.ln = ln;
        /**
         * CB that gets invoked when a refill request is being made
         */
        _this.handleRefill = function (addedDuration, uuid) { return __awaiter(_this, void 0, void 0, function () {
            var msg;
            return __generator(this, function (_a) {
                msg = { uuid: uuid, addedDuration: addedDuration, event: 'refill' };
                debug("Refilling subscription with UUID " + uuid);
                debug('Sending %O', msg);
                this.ws.send(JSON.stringify(msg));
                return [2 /*return*/];
            });
        }); };
        /**
         * CB that gets invoked when a unsubscribe request is being made
         */
        _this.handleUnsubscribe = function (uuid) { return __awaiter(_this, void 0, void 0, function () {
            var msg;
            return __generator(this, function (_a) {
                msg = { uuid: uuid, event: 'unsubscribe' };
                debug("Sending unsubscription request with UUID " + uuid);
                debug('Sending %O', msg);
                this.ws.send(JSON.stringify(msg));
                return [2 /*return*/];
            });
        }); };
        /**
         * CB that gets invoked when a new message is received
         * over the WS
         */
        _this.handleMessage = function (uuid, parsed, wsData) { return __awaiter(_this, void 0, void 0, function () {
            var paymentResult, sub, snapshot, newSub, validated, onSnapshot, data, validated;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!types_1.MessageTypes.isInvoice(parsed)) return [3 /*break*/, 2];
                        debug("Got invoice for request with UUID " + uuid);
                        return [4 /*yield*/, this.ln.send(parsed.invoice)];
                    case 1:
                        paymentResult = _a.sent();
                        debug('Paid invoice: %O', paymentResult);
                        return [3 /*break*/, 3];
                    case 2:
                        if (types_1.MessageTypes.isPaymentReceived(parsed)) {
                            debug("Payment received for " + parsed.uuid);
                        }
                        else {
                            sub = this.subscriptions[uuid];
                            if (!sub) {
                                debug('Got message with UUID for subscription not found in active subscriptions map! UUID: %s. Subscriptions map: %O', uuid, this.subscriptions);
                            }
                            else {
                                if (types_1.MessageTypes.isSnapshot(parsed)) {
                                    snapshot = parsed.snapshot;
                                    debug("Received snapshot for " + uuid + " with " + snapshot.length + " elements");
                                    newSub = __assign({}, sub, { activated: true });
                                    this.subscriptions[uuid] = newSub;
                                    validated = types_1.SocketValidate.snapshot(wsData, sub.snapshotType, this.onSnapshotValidationError);
                                    onSnapshot = sub.onSnapshot;
                                    onSnapshot(validated.snapshot);
                                }
                                else if (types_1.MessageTypes.isExchangeDataResponse(parsed, sub.dataType)) {
                                    data = parsed.data;
                                    debug("Received data for " + uuid);
                                    debug('Data: %O', data);
                                    validated = types_1.SocketValidate.data(wsData, sub.dataType, this.onDataValidationError);
                                    this.addDataPoint(uuid, validated.data);
                                    sub.datapoints = sub.datapoints.slice();
                                    sub.onData(validated.data);
                                }
                                else if (types_1.MessageTypes.isTimeWarning(parsed)) {
                                    debug("Received time warning message for " + uuid + ", " + parsed.warnings.duration / 1000 + " seconds left");
                                }
                                else if (types_1.MessageTypes.isUnubscribed(parsed)) {
                                    debug("Subscription " + uuid + " has ended");
                                    if (sub.onSubscriptionEnded) {
                                        sub.onSubscriptionEnded(sub.datapoints);
                                    }
                                }
                                else {
                                    debug("Don't know what to do with message %O", parsed);
                                }
                            }
                        }
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        }); };
        /**
         * Adds a received data point from the API to the list of data points
         * that is passed into the final callback
         */
        _this.addDataPoint = function (uuid, data) {
            var sub = _this.subscriptions[uuid];
            if (!sub) {
                debug("Trying to add datapoint to sub " + uuid + ", couldn't find sub");
                return;
            }
            sub.datapoints = sub.datapoints.concat([data]);
            debug("Added datapoint to sub " + uuid);
        };
        _this.onSnapshotValidationError = function (err) {
            debug('Error happened while validating snapshot! %O', err);
            // TODO something else here
        };
        _this.onDataValidationError = function (err) {
            debug('Error happened while validating data! %O', err);
            // TODO something else here
        };
        _this.subscribe = function (_a) { return __awaiter(_this, void 0, void 0, function () {
            var req;
            var _this = this;
            var symbol = _a.symbol, refundInvoice = _a.refundInvoice, channel = _a.channel, exchange = _a.exchange, onData = _a.onData, onSnapshot = _a.onSnapshot, onSubscriptionEnded = _a.onSubscriptionEnded, duration = _a.duration, rest = __rest(_a, ["symbol", "refundInvoice", "channel", "exchange", "onData", "onSnapshot", "onSubscriptionEnded", "duration"]);
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        debug("Subscribing to " + exchange + " " + symbol + " " + channel);
                        this.checkChannelAndExchange(channel, exchange);
                        debug('Checked sub validity');
                        if (!!refundInvoice) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.ln.receive()];
                    case 1:
                        refundInvoice = _b.sent();
                        _b.label = 2;
                    case 2:
                        req = __assign({ event: 'subscribe', uuid: uuid_1.UUID.newUUID(), symbol: symbol,
                            refundInvoice: refundInvoice,
                            channel: channel,
                            exchange: exchange,
                            duration: duration }, rest);
                        this.ws.send(JSON.stringify(req));
                        debug("Sending subscription request with UUID " + req.uuid);
                        debug('Request: %O', req);
                        debug("URL: " + this.url);
                        return [2 /*return*/, new Promise(function (resolve) {
                                var types = _this.getTypes(channel, exchange);
                                _this.subscriptions[req.uuid] = {
                                    activated: false,
                                    snapshotType: types.snapshot,
                                    dataType: types.data,
                                    onSnapshot: onSnapshot,
                                    onData: onData,
                                    onSubscriptionEnded: onSubscriptionEnded,
                                    datapoints: [],
                                    refundInvoice: req.refundInvoice,
                                };
                                var subscription = {
                                    refill: function (addedDuration) { return _this.handleRefill(addedDuration, req.uuid); },
                                    unsubscribe: function () { return _this.handleUnsubscribe(req.uuid); },
                                };
                                resolve(subscription);
                            })];
                }
            });
        }); };
        _this.subscriptions = {};
        return _this;
    }
    return ExchangeSocketBase;
}(common_1.SbWebSocket));
exports.ExchangeSocketBase = ExchangeSocketBase;
