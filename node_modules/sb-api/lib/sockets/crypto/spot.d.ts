import { LightningApi } from '../../lightning';
import { FuturesExchange } from '../../types/exchange/futures';
import { ExchangeSpotTypes, SpotExchange } from '../../types/exchange/spot';
import { OnWsOpen } from '../common';
import { BaseSubscribeArgs, ExchangeChannel, ExchangeSocketBase, Subscription } from './common';
export interface SpotSubscribeArgs<E extends SpotExchange, C extends ExchangeChannel> extends BaseSubscribeArgs<E, C> {
    onSnapshot: (snapshot: ExchangeSpotTypes.SpotSnapshot<C, E>) => any;
    onData: (data: ExchangeSpotTypes.SpotData<C, E>) => any;
    onSubscriptionEnded?: (datapoint: Array<ExchangeSpotTypes.SpotData<C, E>>) => any;
}
export interface FuturesSubscribeArgs<E extends FuturesExchange, C extends ExchangeChannel> extends BaseSubscribeArgs<E, C> {
}
export declare class ExchangeSpotSocket extends ExchangeSocketBase {
    protected ln: LightningApi;
    constructor(ln: LightningApi, onOpen: OnWsOpen);
    protected getTypes: (channel: ExchangeChannel, exchange: "kraken" | "coinbase" | "binance" | "bitfinex" | "gemini" | "bitstamp") => {
        data: import("io-ts").RefinementC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            price: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            eventTime: import("io-ts").NumberC;
            orderId: import("io-ts").NumberC;
            quantityTotal: import("io-ts").NumberC;
        }>]>>;
        snapshot: import("io-ts").ArrayC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            price: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            eventTime: import("io-ts").NumberC;
            orderId: import("io-ts").NumberC;
            quantityTotal: import("io-ts").NumberC;
        }>]>>;
    } | {
        data: import("io-ts").RefinementC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            price: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            eventTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
            quantityTotal: import("io-ts").NumberC;
            symbol: import("io-ts").KeyofC<{
                BTCUSDT: import("io-ts").NullC;
                ETHBTC: import("io-ts").NullC;
                ETHUSDT: import("io-ts").NullC;
            }>;
        }>]>>;
        snapshot: import("io-ts").ArrayC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            price: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            eventTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
            quantityTotal: import("io-ts").NumberC;
            symbol: import("io-ts").KeyofC<{
                BTCUSDT: import("io-ts").NullC;
                ETHBTC: import("io-ts").NullC;
                ETHUSDT: import("io-ts").NullC;
            }>;
        }>]>>;
    } | {
        data: import("io-ts").RefinementC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            price: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            symbol: import("io-ts").KeyofC<{
                ETHBTC: import("io-ts").NullC;
                BTCUSD: import("io-ts").NullC;
                ETHUSD: import("io-ts").NullC;
            }>;
            quantityTotal: import("io-ts").NumberC;
        }>]>>;
        snapshot: import("io-ts").ArrayC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            price: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            symbol: import("io-ts").KeyofC<{
                ETHBTC: import("io-ts").NullC;
                BTCUSD: import("io-ts").NullC;
                ETHUSD: import("io-ts").NullC;
            }>;
            quantityTotal: import("io-ts").NumberC;
        }>]>>;
    } | {
        data: import("io-ts").RefinementC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            price: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            eventTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
            quantityChange: import("io-ts").NumberC;
            quantityTotal: import("io-ts").NumberC;
        }>]>>;
        snapshot: import("io-ts").ArrayC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            price: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            eventTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
            quantityChange: import("io-ts").NumberC;
            quantityTotal: import("io-ts").NumberC;
        }>]>>;
    } | {
        data: import("io-ts").RefinementC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            price: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            eventTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
            orderId: import("io-ts").RefinementC<import("io-ts").NumberC>;
            quantityChange: import("io-ts").NumberC;
        }>]>>;
        snapshot: import("io-ts").ArrayC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            price: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            eventTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
            orderId: import("io-ts").RefinementC<import("io-ts").NumberC>;
            quantityChange: import("io-ts").NumberC;
        }>]>>;
    } | {
        data: import("io-ts").RefinementC<import("io-ts").TypeC<{}>>;
        snapshot: import("io-ts").ArrayC<import("io-ts").TypeC<{}>>;
    } | {
        data: import("io-ts").RefinementC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            bid: import("io-ts").NumberC;
            ask: import("io-ts").NumberC;
            symbol: import("io-ts").StringC;
            volume: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            askSize: import("io-ts").NumberC;
            bidSize: import("io-ts").NumberC;
            close: import("io-ts").NumberC;
            closeQuantity: import("io-ts").NumberC;
            eventTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
            firstTradeId: import("io-ts").RefinementC<import("io-ts").NumberC>;
            high: import("io-ts").NumberC;
            lastTradeId: import("io-ts").RefinementC<import("io-ts").NumberC>;
            low: import("io-ts").NumberC;
            open: import("io-ts").NumberC;
            prevClose: import("io-ts").NumberC;
            priceChange: import("io-ts").NumberC;
            priceChangePerc: import("io-ts").NumberC;
            quoteVolume: import("io-ts").NumberC;
            statCloseTime: import("io-ts").NumberC;
            statOpenTime: import("io-ts").NumberC;
            weightedAvePrice: import("io-ts").NumberC;
        }>]>>;
        snapshot: import("io-ts").ArrayC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            bid: import("io-ts").NumberC;
            ask: import("io-ts").NumberC;
            symbol: import("io-ts").StringC;
            volume: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            askSize: import("io-ts").NumberC;
            bidSize: import("io-ts").NumberC;
            close: import("io-ts").NumberC;
            closeQuantity: import("io-ts").NumberC;
            eventTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
            firstTradeId: import("io-ts").RefinementC<import("io-ts").NumberC>;
            high: import("io-ts").NumberC;
            lastTradeId: import("io-ts").RefinementC<import("io-ts").NumberC>;
            low: import("io-ts").NumberC;
            open: import("io-ts").NumberC;
            prevClose: import("io-ts").NumberC;
            priceChange: import("io-ts").NumberC;
            priceChangePerc: import("io-ts").NumberC;
            quoteVolume: import("io-ts").NumberC;
            statCloseTime: import("io-ts").NumberC;
            statOpenTime: import("io-ts").NumberC;
            weightedAvePrice: import("io-ts").NumberC;
        }>]>>;
    } | {
        data: import("io-ts").RefinementC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            bid: import("io-ts").NumberC;
            ask: import("io-ts").NumberC;
            symbol: import("io-ts").StringC;
            volume: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            eventTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
            priceChange: import("io-ts").NumberC;
            priceChangePerc: import("io-ts").NumberC;
            close: import("io-ts").NumberC;
            bidSize: import("io-ts").NumberC;
            askSize: import("io-ts").NumberC;
            high: import("io-ts").NumberC;
            low: import("io-ts").NumberC;
        }>]>>;
        snapshot: import("io-ts").ArrayC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            bid: import("io-ts").NumberC;
            ask: import("io-ts").NumberC;
            symbol: import("io-ts").StringC;
            volume: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            eventTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
            priceChange: import("io-ts").NumberC;
            priceChangePerc: import("io-ts").NumberC;
            close: import("io-ts").NumberC;
            bidSize: import("io-ts").NumberC;
            askSize: import("io-ts").NumberC;
            high: import("io-ts").NumberC;
            low: import("io-ts").NumberC;
        }>]>>;
    } | {
        data: import("io-ts").RefinementC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            bid: import("io-ts").NumberC;
            ask: import("io-ts").NumberC;
            symbol: import("io-ts").StringC;
            volume: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            eventTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
            open: import("io-ts").NumberC;
            high: import("io-ts").NumberC;
            low: import("io-ts").NumberC;
            lastTradeId: import("io-ts").RefinementC<import("io-ts").NumberC>;
        }>]>>;
        snapshot: import("io-ts").ArrayC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            bid: import("io-ts").NumberC;
            ask: import("io-ts").NumberC;
            symbol: import("io-ts").StringC;
            volume: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            eventTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
            open: import("io-ts").NumberC;
            high: import("io-ts").NumberC;
            low: import("io-ts").NumberC;
            lastTradeId: import("io-ts").RefinementC<import("io-ts").NumberC>;
        }>]>>;
    } | {
        data: import("io-ts").RefinementC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            bid: import("io-ts").NumberC;
            ask: import("io-ts").NumberC;
            symbol: import("io-ts").StringC;
            volume: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            statCloseTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
        }>]>>;
        snapshot: import("io-ts").ArrayC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            bid: import("io-ts").NumberC;
            ask: import("io-ts").NumberC;
            symbol: import("io-ts").StringC;
            volume: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            statCloseTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
        }>]>>;
    } | {
        data: import("io-ts").RefinementC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            bid: import("io-ts").NumberC;
            ask: import("io-ts").NumberC;
            symbol: import("io-ts").StringC;
            volume: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            eventTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
            weightedAvePrice: import("io-ts").NumberC;
            ask: import("io-ts").NumberC;
            open: import("io-ts").NumberC;
            high: import("io-ts").NumberC;
            low: import("io-ts").NumberC;
        }>]>>;
        snapshot: import("io-ts").ArrayC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            bid: import("io-ts").NumberC;
            ask: import("io-ts").NumberC;
            symbol: import("io-ts").StringC;
            volume: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            eventTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
            weightedAvePrice: import("io-ts").NumberC;
            ask: import("io-ts").NumberC;
            open: import("io-ts").NumberC;
            high: import("io-ts").NumberC;
            low: import("io-ts").NumberC;
        }>]>>;
    } | {
        data: import("io-ts").RefinementC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            bid: import("io-ts").NumberC;
            ask: import("io-ts").NumberC;
            symbol: import("io-ts").StringC;
            volume: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            askSize: import("io-ts").NumberC;
            bidSize: import("io-ts").NumberC;
            close: import("io-ts").NumberC;
            closeQuantity: import("io-ts").NumberC;
            eventTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
            high: import("io-ts").NumberC;
            low: import("io-ts").NumberC;
            open: import("io-ts").NumberC;
            statCloseTime: import("io-ts").NumberC;
            statOpenTime: import("io-ts").NumberC;
            totalTrades: import("io-ts").RefinementC<import("io-ts").NumberC>;
            weightedAvePrice: import("io-ts").NumberC;
        }>]>>;
        snapshot: import("io-ts").ArrayC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            bid: import("io-ts").NumberC;
            ask: import("io-ts").NumberC;
            symbol: import("io-ts").StringC;
            volume: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            askSize: import("io-ts").NumberC;
            bidSize: import("io-ts").NumberC;
            close: import("io-ts").NumberC;
            closeQuantity: import("io-ts").NumberC;
            eventTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
            high: import("io-ts").NumberC;
            low: import("io-ts").NumberC;
            open: import("io-ts").NumberC;
            statCloseTime: import("io-ts").NumberC;
            statOpenTime: import("io-ts").NumberC;
            totalTrades: import("io-ts").RefinementC<import("io-ts").NumberC>;
            weightedAvePrice: import("io-ts").NumberC;
        }>]>>;
    } | {
        data: import("io-ts").RefinementC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            price: import("io-ts").NumberC;
            quantity: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            eventTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
            tradeId: import("io-ts").NumberC;
        }>]>>;
        snapshot: import("io-ts").ArrayC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            price: import("io-ts").NumberC;
            quantity: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            eventTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
            tradeId: import("io-ts").NumberC;
        }>]>>;
    } | {
        data: import("io-ts").RefinementC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            price: import("io-ts").NumberC;
            quantity: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            buyerId: import("io-ts").StringC;
            marketMaker: import("io-ts").BooleanC;
            sellerId: import("io-ts").StringC;
            symbol: import("io-ts").StringC;
            tradeId: import("io-ts").NumberC;
            tradeTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
        }>]>>;
        snapshot: import("io-ts").ArrayC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            price: import("io-ts").NumberC;
            quantity: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            buyerId: import("io-ts").StringC;
            marketMaker: import("io-ts").BooleanC;
            sellerId: import("io-ts").StringC;
            symbol: import("io-ts").StringC;
            tradeId: import("io-ts").NumberC;
            tradeTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
        }>]>>;
    } | {
        data: import("io-ts").RefinementC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            price: import("io-ts").NumberC;
            quantity: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            buyerId: import("io-ts").StringC;
            eventTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
            marketMaker: import("io-ts").BooleanC;
            sellerId: import("io-ts").StringC;
            symbol: import("io-ts").StringC;
            tradeId: import("io-ts").NumberC;
            tradeTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
        }>]>>;
        snapshot: import("io-ts").ArrayC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            price: import("io-ts").NumberC;
            quantity: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            buyerId: import("io-ts").StringC;
            eventTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
            marketMaker: import("io-ts").BooleanC;
            sellerId: import("io-ts").StringC;
            symbol: import("io-ts").StringC;
            tradeId: import("io-ts").NumberC;
            tradeTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
        }>]>>;
    } | {
        data: import("io-ts").RefinementC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            price: import("io-ts").NumberC;
            quantity: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            marketMaker: import("io-ts").BooleanC;
            tradeId: import("io-ts").NumberC;
            tradeTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
        }>]>>;
        snapshot: import("io-ts").ArrayC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            price: import("io-ts").NumberC;
            quantity: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            marketMaker: import("io-ts").BooleanC;
            tradeId: import("io-ts").NumberC;
            tradeTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
        }>]>>;
    } | {
        data: import("io-ts").RefinementC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            price: import("io-ts").NumberC;
            quantity: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            buyerId: import("io-ts").StringC;
            marketMaker: import("io-ts").BooleanC;
            sellerId: import("io-ts").StringC;
            tradeId: import("io-ts").NumberC;
        }>]>>;
        snapshot: import("io-ts").ArrayC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            price: import("io-ts").NumberC;
            quantity: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            buyerId: import("io-ts").StringC;
            marketMaker: import("io-ts").BooleanC;
            sellerId: import("io-ts").StringC;
            tradeId: import("io-ts").NumberC;
        }>]>>;
    } | {
        data: import("io-ts").RefinementC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            price: import("io-ts").NumberC;
            quantity: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            eventTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
            marketMaker: import("io-ts").BooleanC;
            symbol: import("io-ts").StringC;
            tradeTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
        }>]>>;
        snapshot: import("io-ts").ArrayC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            price: import("io-ts").NumberC;
            quantity: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            eventTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
            marketMaker: import("io-ts").BooleanC;
            symbol: import("io-ts").StringC;
            tradeTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
        }>]>>;
    };
    protected checkChannelAndExchange: (channel: ExchangeChannel, exchange: "kraken" | "bitmex" | "coinbase" | "binance" | "bitfinex" | "gemini" | "bitstamp") => void;
    tickers: <E extends "kraken" | "coinbase" | "binance" | "bitfinex" | "gemini" | "bitstamp">(args: Pick<SpotSubscribeArgs<E, "tickers">, "symbol" | "refundInvoice" | "exchange" | "onData" | "onSnapshot" | "onSubscriptionEnded" | "duration">) => Promise<Subscription>;
    books: <E extends "kraken" | "coinbase" | "binance" | "bitfinex" | "gemini" | "bitstamp">(args: Pick<SpotSubscribeArgs<E, "books">, "symbol" | "refundInvoice" | "exchange" | "onData" | "onSnapshot" | "onSubscriptionEnded" | "duration">) => Promise<Subscription>;
    trades: <E extends "kraken" | "coinbase" | "binance" | "bitfinex" | "gemini" | "bitstamp">(args: Pick<SpotSubscribeArgs<E, "trades">, "symbol" | "refundInvoice" | "exchange" | "onData" | "onSnapshot" | "onSubscriptionEnded" | "duration">) => Promise<Subscription>;
}
export declare class ExchangeSpotSocketTestnet extends ExchangeSocketBase {
    protected ln: LightningApi;
    constructor(ln: LightningApi, onOpen: OnWsOpen);
    protected checkChannelAndExchange: (channel: ExchangeChannel, exchange: "kraken" | "bitmex" | "coinbase" | "binance" | "bitfinex" | "gemini" | "bitstamp") => void;
    protected getTypes: (channel: ExchangeChannel, exchange: "kraken" | "bitmex" | "coinbase" | "binance" | "bitfinex" | "gemini" | "bitstamp") => {
        data: import("io-ts").RefinementC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            price: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            eventTime: import("io-ts").NumberC;
            orderId: import("io-ts").NumberC;
            quantityTotal: import("io-ts").NumberC;
        }>]>>;
        snapshot: import("io-ts").ArrayC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            price: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            eventTime: import("io-ts").NumberC;
            orderId: import("io-ts").NumberC;
            quantityTotal: import("io-ts").NumberC;
        }>]>>;
    } | {
        data: import("io-ts").RefinementC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            price: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            eventTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
            quantityTotal: import("io-ts").NumberC;
            symbol: import("io-ts").KeyofC<{
                BTCUSDT: import("io-ts").NullC;
                ETHBTC: import("io-ts").NullC;
                ETHUSDT: import("io-ts").NullC;
            }>;
        }>]>>;
        snapshot: import("io-ts").ArrayC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            price: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            eventTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
            quantityTotal: import("io-ts").NumberC;
            symbol: import("io-ts").KeyofC<{
                BTCUSDT: import("io-ts").NullC;
                ETHBTC: import("io-ts").NullC;
                ETHUSDT: import("io-ts").NullC;
            }>;
        }>]>>;
    } | {
        data: import("io-ts").RefinementC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            price: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            symbol: import("io-ts").KeyofC<{
                ETHBTC: import("io-ts").NullC;
                BTCUSD: import("io-ts").NullC;
                ETHUSD: import("io-ts").NullC;
            }>;
            quantityTotal: import("io-ts").NumberC;
        }>]>>;
        snapshot: import("io-ts").ArrayC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            price: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            symbol: import("io-ts").KeyofC<{
                ETHBTC: import("io-ts").NullC;
                BTCUSD: import("io-ts").NullC;
                ETHUSD: import("io-ts").NullC;
            }>;
            quantityTotal: import("io-ts").NumberC;
        }>]>>;
    } | {
        data: import("io-ts").RefinementC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            price: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            eventTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
            quantityChange: import("io-ts").NumberC;
            quantityTotal: import("io-ts").NumberC;
        }>]>>;
        snapshot: import("io-ts").ArrayC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            price: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            eventTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
            quantityChange: import("io-ts").NumberC;
            quantityTotal: import("io-ts").NumberC;
        }>]>>;
    } | {
        data: import("io-ts").RefinementC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            price: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            eventTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
            orderId: import("io-ts").RefinementC<import("io-ts").NumberC>;
            quantityChange: import("io-ts").NumberC;
        }>]>>;
        snapshot: import("io-ts").ArrayC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            price: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            eventTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
            orderId: import("io-ts").RefinementC<import("io-ts").NumberC>;
            quantityChange: import("io-ts").NumberC;
        }>]>>;
    } | {
        data: import("io-ts").RefinementC<import("io-ts").TypeC<{}>>;
        snapshot: import("io-ts").ArrayC<import("io-ts").TypeC<{}>>;
    } | {
        data: import("io-ts").TypeC<{}>;
        snapshot: import("io-ts").ArrayC<import("io-ts").TypeC<{}>>;
    } | {
        data: import("io-ts").RefinementC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            bid: import("io-ts").NumberC;
            ask: import("io-ts").NumberC;
            symbol: import("io-ts").StringC;
            volume: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            askSize: import("io-ts").NumberC;
            bidSize: import("io-ts").NumberC;
            close: import("io-ts").NumberC;
            closeQuantity: import("io-ts").NumberC;
            eventTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
            firstTradeId: import("io-ts").RefinementC<import("io-ts").NumberC>;
            high: import("io-ts").NumberC;
            lastTradeId: import("io-ts").RefinementC<import("io-ts").NumberC>;
            low: import("io-ts").NumberC;
            open: import("io-ts").NumberC;
            prevClose: import("io-ts").NumberC;
            priceChange: import("io-ts").NumberC;
            priceChangePerc: import("io-ts").NumberC;
            quoteVolume: import("io-ts").NumberC;
            statCloseTime: import("io-ts").NumberC;
            statOpenTime: import("io-ts").NumberC;
            weightedAvePrice: import("io-ts").NumberC;
        }>]>>;
        snapshot: import("io-ts").ArrayC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            bid: import("io-ts").NumberC;
            ask: import("io-ts").NumberC;
            symbol: import("io-ts").StringC;
            volume: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            askSize: import("io-ts").NumberC;
            bidSize: import("io-ts").NumberC;
            close: import("io-ts").NumberC;
            closeQuantity: import("io-ts").NumberC;
            eventTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
            firstTradeId: import("io-ts").RefinementC<import("io-ts").NumberC>;
            high: import("io-ts").NumberC;
            lastTradeId: import("io-ts").RefinementC<import("io-ts").NumberC>;
            low: import("io-ts").NumberC;
            open: import("io-ts").NumberC;
            prevClose: import("io-ts").NumberC;
            priceChange: import("io-ts").NumberC;
            priceChangePerc: import("io-ts").NumberC;
            quoteVolume: import("io-ts").NumberC;
            statCloseTime: import("io-ts").NumberC;
            statOpenTime: import("io-ts").NumberC;
            weightedAvePrice: import("io-ts").NumberC;
        }>]>>;
    } | {
        data: import("io-ts").RefinementC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            bid: import("io-ts").NumberC;
            ask: import("io-ts").NumberC;
            symbol: import("io-ts").StringC;
            volume: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            eventTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
            priceChange: import("io-ts").NumberC;
            priceChangePerc: import("io-ts").NumberC;
            close: import("io-ts").NumberC;
            bidSize: import("io-ts").NumberC;
            askSize: import("io-ts").NumberC;
            high: import("io-ts").NumberC;
            low: import("io-ts").NumberC;
        }>]>>;
        snapshot: import("io-ts").ArrayC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            bid: import("io-ts").NumberC;
            ask: import("io-ts").NumberC;
            symbol: import("io-ts").StringC;
            volume: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            eventTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
            priceChange: import("io-ts").NumberC;
            priceChangePerc: import("io-ts").NumberC;
            close: import("io-ts").NumberC;
            bidSize: import("io-ts").NumberC;
            askSize: import("io-ts").NumberC;
            high: import("io-ts").NumberC;
            low: import("io-ts").NumberC;
        }>]>>;
    } | {
        data: import("io-ts").RefinementC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            bid: import("io-ts").NumberC;
            ask: import("io-ts").NumberC;
            symbol: import("io-ts").StringC;
            volume: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            eventTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
            open: import("io-ts").NumberC;
            high: import("io-ts").NumberC;
            low: import("io-ts").NumberC;
            lastTradeId: import("io-ts").RefinementC<import("io-ts").NumberC>;
        }>]>>;
        snapshot: import("io-ts").ArrayC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            bid: import("io-ts").NumberC;
            ask: import("io-ts").NumberC;
            symbol: import("io-ts").StringC;
            volume: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            eventTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
            open: import("io-ts").NumberC;
            high: import("io-ts").NumberC;
            low: import("io-ts").NumberC;
            lastTradeId: import("io-ts").RefinementC<import("io-ts").NumberC>;
        }>]>>;
    } | {
        data: import("io-ts").RefinementC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            bid: import("io-ts").NumberC;
            ask: import("io-ts").NumberC;
            symbol: import("io-ts").StringC;
            volume: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            statCloseTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
        }>]>>;
        snapshot: import("io-ts").ArrayC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            bid: import("io-ts").NumberC;
            ask: import("io-ts").NumberC;
            symbol: import("io-ts").StringC;
            volume: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            statCloseTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
        }>]>>;
    } | {
        data: import("io-ts").RefinementC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            bid: import("io-ts").NumberC;
            ask: import("io-ts").NumberC;
            symbol: import("io-ts").StringC;
            volume: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            eventTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
            weightedAvePrice: import("io-ts").NumberC;
            ask: import("io-ts").NumberC;
            open: import("io-ts").NumberC;
            high: import("io-ts").NumberC;
            low: import("io-ts").NumberC;
        }>]>>;
        snapshot: import("io-ts").ArrayC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            bid: import("io-ts").NumberC;
            ask: import("io-ts").NumberC;
            symbol: import("io-ts").StringC;
            volume: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            eventTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
            weightedAvePrice: import("io-ts").NumberC;
            ask: import("io-ts").NumberC;
            open: import("io-ts").NumberC;
            high: import("io-ts").NumberC;
            low: import("io-ts").NumberC;
        }>]>>;
    } | {
        data: import("io-ts").RefinementC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            bid: import("io-ts").NumberC;
            ask: import("io-ts").NumberC;
            symbol: import("io-ts").StringC;
            volume: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            askSize: import("io-ts").NumberC;
            bidSize: import("io-ts").NumberC;
            close: import("io-ts").NumberC;
            closeQuantity: import("io-ts").NumberC;
            eventTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
            high: import("io-ts").NumberC;
            low: import("io-ts").NumberC;
            open: import("io-ts").NumberC;
            statCloseTime: import("io-ts").NumberC;
            statOpenTime: import("io-ts").NumberC;
            totalTrades: import("io-ts").RefinementC<import("io-ts").NumberC>;
            weightedAvePrice: import("io-ts").NumberC;
        }>]>>;
        snapshot: import("io-ts").ArrayC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            bid: import("io-ts").NumberC;
            ask: import("io-ts").NumberC;
            symbol: import("io-ts").StringC;
            volume: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            askSize: import("io-ts").NumberC;
            bidSize: import("io-ts").NumberC;
            close: import("io-ts").NumberC;
            closeQuantity: import("io-ts").NumberC;
            eventTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
            high: import("io-ts").NumberC;
            low: import("io-ts").NumberC;
            open: import("io-ts").NumberC;
            statCloseTime: import("io-ts").NumberC;
            statOpenTime: import("io-ts").NumberC;
            totalTrades: import("io-ts").RefinementC<import("io-ts").NumberC>;
            weightedAvePrice: import("io-ts").NumberC;
        }>]>>;
    } | {
        data: import("io-ts").TypeC<{}>;
        snapshot: import("io-ts").ArrayC<import("io-ts").TypeC<{}>>;
    } | {
        data: import("io-ts").RefinementC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            price: import("io-ts").NumberC;
            quantity: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            eventTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
            tradeId: import("io-ts").NumberC;
        }>]>>;
        snapshot: import("io-ts").ArrayC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            price: import("io-ts").NumberC;
            quantity: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            eventTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
            tradeId: import("io-ts").NumberC;
        }>]>>;
    } | {
        data: import("io-ts").RefinementC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            price: import("io-ts").NumberC;
            quantity: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            buyerId: import("io-ts").StringC;
            marketMaker: import("io-ts").BooleanC;
            sellerId: import("io-ts").StringC;
            symbol: import("io-ts").StringC;
            tradeId: import("io-ts").NumberC;
            tradeTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
        }>]>>;
        snapshot: import("io-ts").ArrayC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            price: import("io-ts").NumberC;
            quantity: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            buyerId: import("io-ts").StringC;
            marketMaker: import("io-ts").BooleanC;
            sellerId: import("io-ts").StringC;
            symbol: import("io-ts").StringC;
            tradeId: import("io-ts").NumberC;
            tradeTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
        }>]>>;
    } | {
        data: import("io-ts").RefinementC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            price: import("io-ts").NumberC;
            quantity: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            buyerId: import("io-ts").StringC;
            eventTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
            marketMaker: import("io-ts").BooleanC;
            sellerId: import("io-ts").StringC;
            symbol: import("io-ts").StringC;
            tradeId: import("io-ts").NumberC;
            tradeTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
        }>]>>;
        snapshot: import("io-ts").ArrayC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            price: import("io-ts").NumberC;
            quantity: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            buyerId: import("io-ts").StringC;
            eventTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
            marketMaker: import("io-ts").BooleanC;
            sellerId: import("io-ts").StringC;
            symbol: import("io-ts").StringC;
            tradeId: import("io-ts").NumberC;
            tradeTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
        }>]>>;
    } | {
        data: import("io-ts").RefinementC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            price: import("io-ts").NumberC;
            quantity: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            marketMaker: import("io-ts").BooleanC;
            tradeId: import("io-ts").NumberC;
            tradeTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
        }>]>>;
        snapshot: import("io-ts").ArrayC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            price: import("io-ts").NumberC;
            quantity: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            marketMaker: import("io-ts").BooleanC;
            tradeId: import("io-ts").NumberC;
            tradeTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
        }>]>>;
    } | {
        data: import("io-ts").RefinementC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            price: import("io-ts").NumberC;
            quantity: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            buyerId: import("io-ts").StringC;
            marketMaker: import("io-ts").BooleanC;
            sellerId: import("io-ts").StringC;
            tradeId: import("io-ts").NumberC;
        }>]>>;
        snapshot: import("io-ts").ArrayC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            price: import("io-ts").NumberC;
            quantity: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            buyerId: import("io-ts").StringC;
            marketMaker: import("io-ts").BooleanC;
            sellerId: import("io-ts").StringC;
            tradeId: import("io-ts").NumberC;
        }>]>>;
    } | {
        data: import("io-ts").RefinementC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            price: import("io-ts").NumberC;
            quantity: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            eventTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
            marketMaker: import("io-ts").BooleanC;
            symbol: import("io-ts").StringC;
            tradeTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
        }>]>>;
        snapshot: import("io-ts").ArrayC<import("io-ts").IntersectionC<[import("io-ts").TypeC<{
            price: import("io-ts").NumberC;
            quantity: import("io-ts").NumberC;
        }>, import("io-ts").TypeC<{
            eventTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
            marketMaker: import("io-ts").BooleanC;
            symbol: import("io-ts").StringC;
            tradeTime: import("io-ts").RefinementC<import("io-ts").NumberC>;
        }>]>>;
    } | {
        data: import("io-ts").TypeC<{}>;
        snapshot: import("io-ts").ArrayC<import("io-ts").TypeC<{}>>;
    };
    private getSymbol;
    tickers: <E extends "kraken" | "coinbase" | "binance" | "bitfinex" | "gemini" | "bitstamp">(args: Pick<Pick<SpotSubscribeArgs<E, "tickers">, "symbol" | "refundInvoice" | "exchange" | "onData" | "onSnapshot" | "onSubscriptionEnded" | "duration">, "refundInvoice" | "exchange" | "onData" | "onSnapshot" | "onSubscriptionEnded" | "duration">) => Promise<Subscription>;
    books: <E extends "kraken" | "coinbase" | "binance" | "bitfinex" | "gemini" | "bitstamp">(args: Pick<Pick<SpotSubscribeArgs<E, "books">, "symbol" | "refundInvoice" | "exchange" | "onData" | "onSnapshot" | "onSubscriptionEnded" | "duration">, "refundInvoice" | "exchange" | "onData" | "onSnapshot" | "onSubscriptionEnded" | "duration">) => Promise<Subscription>;
    trades: <E extends "kraken" | "coinbase" | "binance" | "bitfinex" | "gemini" | "bitstamp">(args: Pick<Pick<SpotSubscribeArgs<E, "trades">, "symbol" | "refundInvoice" | "exchange" | "onData" | "onSnapshot" | "onSubscriptionEnded" | "duration">, "refundInvoice" | "exchange" | "onData" | "onSnapshot" | "onSubscriptionEnded" | "duration">) => Promise<Subscription>;
}
