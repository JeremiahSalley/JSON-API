import * as t from 'io-ts';
export declare const ExchangeFuturesBooksTypes: {
    kraken: {
        data: t.RefinementC<t.IntersectionC<[t.IntersectionC<[t.TypeC<{}>, t.PartialC<{
            price: t.NumberC;
            /**
             * Only present if subscribing to perpetual futures
             */
            maturation: t.RefinementC<t.NumberC>;
        }>]>, t.TypeC<{
            eventTime: t.RefinementC<t.NumberC>;
            symbol: t.KeyofC<{
                BTCUSD: t.NullC;
                ETHUSD: t.NullC;
            }>;
            quantityTotal: t.NumberC;
        }>]>>;
        snapshot: t.ArrayC<t.IntersectionC<[t.IntersectionC<[t.TypeC<{}>, t.PartialC<{
            price: t.NumberC;
            /**
             * Only present if subscribing to perpetual futures
             */
            maturation: t.RefinementC<t.NumberC>;
        }>]>, t.TypeC<{
            eventTime: t.RefinementC<t.NumberC>;
            symbol: t.KeyofC<{
                BTCUSD: t.NullC;
                ETHUSD: t.NullC;
            }>;
            quantityTotal: t.NumberC;
        }>]>>;
    };
    bitmex: {
        data: t.RefinementC<t.IntersectionC<[t.IntersectionC<[t.TypeC<{}>, t.PartialC<{
            price: t.NumberC;
            /**
             * Only present if subscribing to perpetual futures
             */
            maturation: t.RefinementC<t.NumberC>;
        }>]>, t.TypeC<{
            symbol: t.KeyofC<{
                BTCUSD: t.NullC;
                ETHUSD: t.NullC;
                ETHBTC: t.NullC;
            }>;
            orderId: t.RefinementC<t.NumberC>;
            quantityChange: t.NumberC;
        }>]>>;
        snapshot: t.ArrayC<t.IntersectionC<[t.IntersectionC<[t.TypeC<{}>, t.PartialC<{
            price: t.NumberC;
            /**
             * Only present if subscribing to perpetual futures
             */
            maturation: t.RefinementC<t.NumberC>;
        }>]>, t.TypeC<{
            symbol: t.KeyofC<{
                BTCUSD: t.NullC;
                ETHUSD: t.NullC;
                ETHBTC: t.NullC;
            }>;
            orderId: t.RefinementC<t.NumberC>;
            quantityChange: t.NumberC;
        }>]>>;
    };
};
export declare const ALL_FUTURES_BOOKS_DATA_TYPES: (t.RefinementC<t.IntersectionC<[t.IntersectionC<[t.TypeC<{}>, t.PartialC<{
    price: t.NumberC;
    /**
     * Only present if subscribing to perpetual futures
     */
    maturation: t.RefinementC<t.NumberC>;
}>]>, t.TypeC<{
    eventTime: t.RefinementC<t.NumberC>;
    symbol: t.KeyofC<{
        BTCUSD: t.NullC;
        ETHUSD: t.NullC;
    }>;
    quantityTotal: t.NumberC;
}>]>> | t.RefinementC<t.IntersectionC<[t.IntersectionC<[t.TypeC<{}>, t.PartialC<{
    price: t.NumberC;
    /**
     * Only present if subscribing to perpetual futures
     */
    maturation: t.RefinementC<t.NumberC>;
}>]>, t.TypeC<{
    symbol: t.KeyofC<{
        BTCUSD: t.NullC;
        ETHUSD: t.NullC;
        ETHBTC: t.NullC;
    }>;
    orderId: t.RefinementC<t.NumberC>;
    quantityChange: t.NumberC;
}>]>>)[];
