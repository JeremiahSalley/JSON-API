import * as t from 'io-ts';
import * as types from 'io-ts-types';
import WebSocket from 'ws';
import { ExchangeSymbol } from './exchange/common/symbols';
import { SpotExchange } from './exchange/spot';
/** Result of validating socket data */
interface ValidateDataResult {
    uuid: string;
    data: any[] | object;
}
/** Result of validating socket snapshot */
interface ValidateSnapshotResult {
    uuid: string;
    snapshot: any[];
}
/** Called on error when validating socket data */
declare type OnError = (err: any) => any;
export declare class DataValidationError extends Error {
    constructor(msg: string);
}
export declare const SocketValidate: {
    snapshot: (msg: WebSocket.Data, type: t.Type<any, any, unknown>, onError: OnError) => ValidateSnapshotResult;
    data: (msg: WebSocket.Data, type: t.Type<any, any, unknown>, onError: OnError) => ValidateDataResult;
};
export declare const RestValidate: {
    data: <T, O = T>(data: object, type: t.Type<T, O, any>) => T;
};
export declare type WelcomeMessageType = t.TypeOf<typeof MessageTypes.Welcome>;
export interface PpcDataMessageType {
    uuid: string;
    data: any[];
}
declare const PAYMENT_RECEIVED = "payment received";
interface PaymentReceivedMessage {
    uuid: string;
    exchange: SpotExchange;
    symbol: ExchangeSymbol;
    duration: number;
    event: typeof PAYMENT_RECEIVED;
}
interface TimeWarningMessage {
    uuid: string;
    warnings: {
        duration: number;
    };
}
declare const UNSUBSCRIBED = "unsubscribed";
interface SubscriptionEnded {
    uuid: string;
    amountRefunded: number;
    event: typeof UNSUBSCRIBED;
}
export interface ExchangeDataMessageType {
    uuid: string;
    data: object;
}
export declare class MessageTypes {
    static Welcome: t.TypeC<{
        message: t.StringC;
        ln_uri: t.StringC;
        version: t.RefinementC<t.NumberC>;
        openChannels: t.ArrayC<t.StringC>;
    }>;
    static Invoice: t.TypeC<{
        uuid: types.uuidC;
        invoice: t.StringC;
    }>;
    static isInfoType: (type: t.Type<any, any, unknown>) => boolean;
    static isInvoice: (msg: any) => msg is {
        uuid: string;
        invoice: string;
    };
    static isSnapshot: (msg: any) => msg is {
        uuid: string;
        snapshot: any[];
    };
    static isInitMsg: (msg: any) => msg is {
        message: string;
        ln_uri: string;
        version: number;
        openChannels: string[];
    };
    static hasUuid: (msg: any) => msg is {
        uuid: string;
    };
    static hasDataAndUuid: (msg: any) => msg is {
        data: any[];
        uuid: string;
    };
    static isPpcDataResponse: (msg: any, type: t.Type<any, any, unknown>) => msg is PpcDataMessageType;
    static isExchangeDataResponse: (msg: any, type: t.Type<any, any, unknown>) => msg is ExchangeDataMessageType;
    static isPaymentReceived: (msg: any) => msg is PaymentReceivedMessage;
    static isTimeWarning: (msg: Partial<TimeWarningMessage>) => msg is TimeWarningMessage;
    static isUnubscribed: (msg: Partial<SubscriptionEnded>) => msg is SubscriptionEnded;
}
export {};
