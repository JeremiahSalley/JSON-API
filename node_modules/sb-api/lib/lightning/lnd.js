"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var debug_1 = __importDefault(require("debug"));
var lnd_async_1 = __importDefault(require("lnd-async"));
var debug = debug_1.default('sb-api:lightning:lnd');
var LndImpl = /** @class */ (function () {
    function LndImpl(lndClient) {
        var _this = this;
        this.lndClient = lndClient;
        this.getPreimage = function (invoice) {
            debug("Finding preimage to invoice " + invoice);
            var preimage = _this.preimages[invoice];
            if (preimage) {
                return Promise.resolve(preimage);
            }
            else {
                return Promise.reject(new Error("Could not find preimage for invoice " + invoice));
            }
        };
        this.receive = function (description) {
            debug('Generating invoice');
            return _this.lndClient.addInvoice({ memo: description }).then(function (_a) {
                var payment_request = _a.payment_request;
                return payment_request;
            });
        };
        this.send = function (invoice) {
            debug("Paying invoice " + invoice.slice(0, 25) + "...");
            return _this.lndClient
                .sendPaymentSync({ payment_request: invoice })
                .then(function (res) {
                debug("Result of paying invoice " + invoice.slice(0, 10) + ": %O", res);
                var preimage = res.payment_preimage.toString('hex');
                debug("Adding preimage to invoice " + invoice.slice(0, 10) + ": " + preimage);
                _this.preimages[invoice] = preimage;
                return res;
            })
                .catch(function (err) {
                debug("Error when paying invoice " + invoice.slice(0, 10) + ": %O", err);
                throw err;
            });
        };
        this.preimages = {};
        this.getInfo = function () { return _this.lndClient.getInfo({}); };
    }
    return LndImpl;
}());
exports.Lnd = function (args) { return __awaiter(_this, void 0, void 0, function () {
    var client, error_1, info;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                debug('Trying to connect to LND');
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4 /*yield*/, lnd_async_1.default.connect(args)];
            case 2:
                client = _a.sent();
                return [3 /*break*/, 4];
            case 3:
                error_1 = _a.sent();
                debug("Couldn't connect to LND: " + error_1.message);
                throw error_1;
            case 4:
                debug('Succeeded!');
                debug('Trying a getInfo call');
                return [4 /*yield*/, client.getInfo({})];
            case 5:
                info = _a.sent();
                debug('Succeeded!');
                debug('getInfo output: %o', info);
                return [2 /*return*/, new LndImpl(client)];
        }
    });
}); };
