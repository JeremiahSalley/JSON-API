"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var t = __importStar(require("io-ts"));
var CommonSpotExchangeTradeFields = t.type({
    price: t.number,
    quantity: t.number,
});
var CoinbaseSpotTradeFields = t.intersection([
    CommonSpotExchangeTradeFields,
    t.type({
        buyerId: t.string,
        marketMaker: t.boolean,
        sellerId: t.string,
        symbol: t.string,
        tradeId: t.number,
        tradeTime: t.Integer,
    }),
]);
var BinanceSpotTradeFields = t.intersection([
    CommonSpotExchangeTradeFields,
    t.type({
        buyerId: t.string,
        eventTime: t.Integer,
        marketMaker: t.boolean,
        sellerId: t.string,
        symbol: t.string,
        tradeId: t.number,
        tradeTime: t.Integer,
    }),
]);
var BitfinexSpotTradeFields = t.intersection([
    CommonSpotExchangeTradeFields,
    t.type({
        eventTime: t.Integer,
        tradeId: t.number,
    }),
]);
var GeminiSpotTradeFields = t.intersection([
    CommonSpotExchangeTradeFields,
    t.type({
        marketMaker: t.boolean,
        tradeId: t.number,
        tradeTime: t.Integer,
    }),
]);
var BitstampSpotTradeFields = t.intersection([
    CommonSpotExchangeTradeFields,
    t.type({
        buyerId: t.string,
        marketMaker: t.boolean,
        sellerId: t.string,
        tradeId: t.number,
    }),
]);
var KrakenSpotTradeFields = t.intersection([
    CommonSpotExchangeTradeFields,
    t.type({
        eventTime: t.Integer,
        marketMaker: t.boolean,
        symbol: t.string,
        tradeTime: t.Integer,
    }),
]);
exports.ExchangeSpotTradesTypes = {
    bitfinex: {
        data: t.refinement(BitfinexSpotTradeFields, function () { return true; }, 'BitfinexSpotTradesDataType'),
        snapshot: t.array(BitfinexSpotTradeFields, 'BitfinexSpotTradesSnapshotType'),
    },
    coinbase: {
        data: t.refinement(CoinbaseSpotTradeFields, function () { return true; }, 'CoinbaseSpotTradesDataType'),
        snapshot: t.array(CoinbaseSpotTradeFields, 'CoinbaseSpotTradesSnapshotType'),
    },
    binance: {
        data: t.refinement(BinanceSpotTradeFields, function () { return true; }, 'BinanceSpotTradesDataType'),
        snapshot: t.array(BinanceSpotTradeFields, 'BinanceSpotTradesSnapshotType'),
    },
    gemini: {
        data: t.refinement(GeminiSpotTradeFields, function () { return true; }, 'GeminiSpotTradesDataType'),
        snapshot: t.array(GeminiSpotTradeFields, 'GeminiSpotTradesSnapshotType'),
    },
    bitstamp: {
        data: t.refinement(BitstampSpotTradeFields, function () { return true; }, 'BitstampSpotTradesDataType'),
        snapshot: t.array(BitstampSpotTradeFields, 'BitstampSpotTradesSnapshotType'),
    },
    kraken: {
        data: t.refinement(KrakenSpotTradeFields, function () { return true; }, 'KrakenSpotTradesDataType'),
        snapshot: t.array(KrakenSpotTradeFields, 'KrakenSpotTradesSnapshotType'),
    },
    bitmex: {
        data: t.type({}),
        snapshot: t.array(t.type({})),
    },
};
exports.ALL_SPOT_TRADES_DATA_TYPES = [
    exports.ExchangeSpotTradesTypes.bitfinex.data,
    exports.ExchangeSpotTradesTypes.binance.data,
    exports.ExchangeSpotTradesTypes.coinbase.data,
    exports.ExchangeSpotTradesTypes.gemini.data,
    exports.ExchangeSpotTradesTypes.bitstamp.data,
    exports.ExchangeSpotTradesTypes.kraken.data,
];
