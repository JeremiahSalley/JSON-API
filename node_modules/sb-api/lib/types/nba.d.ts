import * as t from 'io-ts';
import * as types from 'io-ts-types';
export declare type NbaTeamType = t.TypeOf<typeof NbaTypes.TeamType>;
export declare type NbaGamesResponseType = t.TypeOf<typeof NbaTypes.GamesResponseType>;
export declare type NbaPlayerResponseType = t.TypeOf<typeof NbaTypes.PlayersResponseType>;
export declare type NbaScheduleResponseType = t.TypeOf<typeof NbaTypes.TeamScheduleResponseType>;
export declare type NbaRosterResponseType = t.TypeOf<typeof NbaTypes.TeamRosterResponseType>;
export declare type NbaStatsResponseType = t.TypeOf<typeof NbaTypes.StatsResponseType>;
export declare type NbaInfoResponseType = t.TypeOf<typeof NbaTypes.InfoType>;
export declare type NbaSeason = t.TypeOf<typeof Season>;
declare const Season: t.KeyofC<{
    '2016-2017': t.NullC;
    '2017-2018': t.NullC;
    '2018-2019': t.NullC;
}>;
export declare class NbaTypes {
    static InfoType: t.TypeC<{
        seasonYear: t.StringC;
        seasonPhase: t.KeyofC<{
            Regular: t.NullC;
            Preseason: t.NullC;
            Postseason: t.NullC;
        }>;
        version: t.RefinementC<t.NumberC>;
        lastUpdated: types.DateFromISOStringC;
    }>;
    static TeamType: t.KeyofC<{
        ATL: t.NullC;
        PHI: t.NullC;
        MIA: t.NullC;
        DET: t.NullC;
        BKN: t.NullC;
        PHX: t.NullC;
        MIL: t.NullC;
        GSW: t.NullC;
        BOS: t.NullC;
        POR: t.NullC;
        MIN: t.NullC;
        HOU: t.NullC;
        CHA: t.NullC;
        SAC: t.NullC;
        NOP: t.NullC;
        IND: t.NullC;
        CHI: t.NullC;
        SAS: t.NullC;
        NYK: t.NullC;
        LAC: t.NullC;
        CLE: t.NullC;
        TOR: t.NullC;
        OKC: t.NullC;
        LAL: t.NullC;
        DAL: t.NullC;
        UTA: t.NullC;
        ORL: t.NullC;
        MEM: t.NullC;
        DEN: t.NullC;
        WAS: t.NullC;
    }>;
    static GamesResponseType: t.ArrayC<t.TypeC<{
        gameId: t.RefinementC<t.NumberC>;
        startTime: types.DateFromISOStringC;
        homeTeam: t.TypeC<{
            teamID: t.KeyofC<{
                ATL: t.NullC;
                PHI: t.NullC;
                MIA: t.NullC;
                DET: t.NullC;
                BKN: t.NullC;
                PHX: t.NullC;
                MIL: t.NullC;
                GSW: t.NullC;
                BOS: t.NullC;
                POR: t.NullC;
                MIN: t.NullC;
                HOU: t.NullC;
                CHA: t.NullC;
                SAC: t.NullC;
                NOP: t.NullC;
                IND: t.NullC;
                CHI: t.NullC;
                SAS: t.NullC;
                NYK: t.NullC;
                LAC: t.NullC;
                CLE: t.NullC;
                TOR: t.NullC;
                OKC: t.NullC;
                LAL: t.NullC;
                DAL: t.NullC;
                UTA: t.NullC;
                ORL: t.NullC;
                MEM: t.NullC;
                DEN: t.NullC;
                WAS: t.NullC;
            }>;
            finalScore: t.RefinementC<t.NumberC>;
        }>;
        awayTeam: t.TypeC<{
            teamID: t.KeyofC<{
                ATL: t.NullC;
                PHI: t.NullC;
                MIA: t.NullC;
                DET: t.NullC;
                BKN: t.NullC;
                PHX: t.NullC;
                MIL: t.NullC;
                GSW: t.NullC;
                BOS: t.NullC;
                POR: t.NullC;
                MIN: t.NullC;
                HOU: t.NullC;
                CHA: t.NullC;
                SAC: t.NullC;
                NOP: t.NullC;
                IND: t.NullC;
                CHI: t.NullC;
                SAS: t.NullC;
                NYK: t.NullC;
                LAC: t.NullC;
                CLE: t.NullC;
                TOR: t.NullC;
                OKC: t.NullC;
                LAL: t.NullC;
                DAL: t.NullC;
                UTA: t.NullC;
                ORL: t.NullC;
                MEM: t.NullC;
                DEN: t.NullC;
                WAS: t.NullC;
            }>;
            finalScore: t.RefinementC<t.NumberC>;
        }>;
        finished: t.BooleanC;
        seasonPhase: t.KeyofC<{
            Regular: t.NullC;
            Preseason: t.NullC;
            Postseason: t.NullC;
        }>;
        year: t.StringC;
    }>>;
    static PlayersResponseType: t.ArrayC<t.IntersectionC<[t.TypeC<{
        playerId: t.RefinementC<t.NumberC>;
        firstName: t.StringC;
        lastName: t.StringC;
        rookieYear: t.RefinementC<t.NumberC>;
        lastYear: t.RefinementC<t.NumberC>;
        birthDate: types.DateFromISOStringC;
        status: t.StringC;
        profileUrl: t.StringC;
        fullName: t.StringC;
        team: t.KeyofC<{
            ATL: t.NullC;
            PHI: t.NullC;
            MIA: t.NullC;
            DET: t.NullC;
            BKN: t.NullC;
            PHX: t.NullC;
            MIL: t.NullC;
            GSW: t.NullC;
            BOS: t.NullC;
            POR: t.NullC;
            MIN: t.NullC;
            HOU: t.NullC;
            CHA: t.NullC;
            SAC: t.NullC;
            NOP: t.NullC;
            IND: t.NullC;
            CHI: t.NullC;
            SAS: t.NullC;
            NYK: t.NullC;
            LAC: t.NullC;
            CLE: t.NullC;
            TOR: t.NullC;
            OKC: t.NullC;
            LAL: t.NullC;
            DAL: t.NullC;
            UTA: t.NullC;
            ORL: t.NullC;
            MEM: t.NullC;
            DEN: t.NullC;
            WAS: t.NullC;
        }>;
    }>, t.PartialC<{}>]>>;
    static TeamRosterResponseType: t.ArrayC<t.IntersectionC<[t.TypeC<{
        playerId: t.RefinementC<t.NumberC>;
        firstName: t.StringC;
        lastName: t.StringC;
        rookieYear: t.RefinementC<t.NumberC>;
        lastYear: t.RefinementC<t.NumberC>;
        birthDate: types.DateFromISOStringC;
        status: t.StringC;
        profileUrl: t.StringC;
        fullName: t.StringC;
        team: t.KeyofC<{
            ATL: t.NullC;
            PHI: t.NullC;
            MIA: t.NullC;
            DET: t.NullC;
            BKN: t.NullC;
            PHX: t.NullC;
            MIL: t.NullC;
            GSW: t.NullC;
            BOS: t.NullC;
            POR: t.NullC;
            MIN: t.NullC;
            HOU: t.NullC;
            CHA: t.NullC;
            SAC: t.NullC;
            NOP: t.NullC;
            IND: t.NullC;
            CHI: t.NullC;
            SAS: t.NullC;
            NYK: t.NullC;
            LAC: t.NullC;
            CLE: t.NullC;
            TOR: t.NullC;
            OKC: t.NullC;
            LAL: t.NullC;
            DAL: t.NullC;
            UTA: t.NullC;
            ORL: t.NullC;
            MEM: t.NullC;
            DEN: t.NullC;
            WAS: t.NullC;
        }>;
    }>, t.PartialC<{}>]>>;
    static TeamScheduleResponseType: t.ArrayC<t.TypeC<{
        gameId: t.RefinementC<t.NumberC>;
        startTime: types.DateFromISOStringC;
        homeTeam: t.TypeC<{
            teamID: t.KeyofC<{
                ATL: t.NullC;
                PHI: t.NullC;
                MIA: t.NullC;
                DET: t.NullC;
                BKN: t.NullC;
                PHX: t.NullC;
                MIL: t.NullC;
                GSW: t.NullC;
                BOS: t.NullC;
                POR: t.NullC;
                MIN: t.NullC;
                HOU: t.NullC;
                CHA: t.NullC;
                SAC: t.NullC;
                NOP: t.NullC;
                IND: t.NullC;
                CHI: t.NullC;
                SAS: t.NullC;
                NYK: t.NullC;
                LAC: t.NullC;
                CLE: t.NullC;
                TOR: t.NullC;
                OKC: t.NullC;
                LAL: t.NullC;
                DAL: t.NullC;
                UTA: t.NullC;
                ORL: t.NullC;
                MEM: t.NullC;
                DEN: t.NullC;
                WAS: t.NullC;
            }>;
            finalScore: t.RefinementC<t.NumberC>;
        }>;
        awayTeam: t.TypeC<{
            teamID: t.KeyofC<{
                ATL: t.NullC;
                PHI: t.NullC;
                MIA: t.NullC;
                DET: t.NullC;
                BKN: t.NullC;
                PHX: t.NullC;
                MIL: t.NullC;
                GSW: t.NullC;
                BOS: t.NullC;
                POR: t.NullC;
                MIN: t.NullC;
                HOU: t.NullC;
                CHA: t.NullC;
                SAC: t.NullC;
                NOP: t.NullC;
                IND: t.NullC;
                CHI: t.NullC;
                SAS: t.NullC;
                NYK: t.NullC;
                LAC: t.NullC;
                CLE: t.NullC;
                TOR: t.NullC;
                OKC: t.NullC;
                LAL: t.NullC;
                DAL: t.NullC;
                UTA: t.NullC;
                ORL: t.NullC;
                MEM: t.NullC;
                DEN: t.NullC;
                WAS: t.NullC;
            }>;
            finalScore: t.RefinementC<t.NumberC>;
        }>;
        finished: t.BooleanC;
        seasonPhase: t.KeyofC<{
            Regular: t.NullC;
            Preseason: t.NullC;
            Postseason: t.NullC;
        }>;
        year: t.StringC;
    }>>;
    static StatsResponseType: t.ArrayC<t.TypeC<{
        playerId: t.RefinementC<t.NumberC>;
        min: t.RefinementC<t.NumberC>;
        fgm: t.RefinementC<t.NumberC>;
        fga: t.RefinementC<t.NumberC>;
        tpm: t.RefinementC<t.NumberC>;
        tpa: t.RefinementC<t.NumberC>;
        ftm: t.RefinementC<t.NumberC>;
        fta: t.RefinementC<t.NumberC>;
        plusminus: t.RefinementC<t.NumberC>;
        off: t.RefinementC<t.NumberC>;
        deff: t.RefinementC<t.NumberC>;
        tot: t.RefinementC<t.NumberC>;
        ast: t.RefinementC<t.NumberC>;
        pf: t.RefinementC<t.NumberC>;
        st: t.RefinementC<t.NumberC>;
        to: t.RefinementC<t.NumberC>;
        bs: t.RefinementC<t.NumberC>;
        pts: t.RefinementC<t.NumberC>;
    }>>;
    static ALL_NBA_TYPES: (t.ArrayC<t.TypeC<{
        gameId: t.RefinementC<t.NumberC>;
        startTime: types.DateFromISOStringC;
        homeTeam: t.TypeC<{
            teamID: t.KeyofC<{
                ATL: t.NullC;
                PHI: t.NullC;
                MIA: t.NullC;
                DET: t.NullC;
                BKN: t.NullC;
                PHX: t.NullC;
                MIL: t.NullC;
                GSW: t.NullC;
                BOS: t.NullC;
                POR: t.NullC;
                MIN: t.NullC;
                HOU: t.NullC;
                CHA: t.NullC;
                SAC: t.NullC;
                NOP: t.NullC;
                IND: t.NullC;
                CHI: t.NullC;
                SAS: t.NullC;
                NYK: t.NullC;
                LAC: t.NullC;
                CLE: t.NullC;
                TOR: t.NullC;
                OKC: t.NullC;
                LAL: t.NullC;
                DAL: t.NullC;
                UTA: t.NullC;
                ORL: t.NullC;
                MEM: t.NullC;
                DEN: t.NullC;
                WAS: t.NullC;
            }>;
            finalScore: t.RefinementC<t.NumberC>;
        }>;
        awayTeam: t.TypeC<{
            teamID: t.KeyofC<{
                ATL: t.NullC;
                PHI: t.NullC;
                MIA: t.NullC;
                DET: t.NullC;
                BKN: t.NullC;
                PHX: t.NullC;
                MIL: t.NullC;
                GSW: t.NullC;
                BOS: t.NullC;
                POR: t.NullC;
                MIN: t.NullC;
                HOU: t.NullC;
                CHA: t.NullC;
                SAC: t.NullC;
                NOP: t.NullC;
                IND: t.NullC;
                CHI: t.NullC;
                SAS: t.NullC;
                NYK: t.NullC;
                LAC: t.NullC;
                CLE: t.NullC;
                TOR: t.NullC;
                OKC: t.NullC;
                LAL: t.NullC;
                DAL: t.NullC;
                UTA: t.NullC;
                ORL: t.NullC;
                MEM: t.NullC;
                DEN: t.NullC;
                WAS: t.NullC;
            }>;
            finalScore: t.RefinementC<t.NumberC>;
        }>;
        finished: t.BooleanC;
        seasonPhase: t.KeyofC<{
            Regular: t.NullC;
            Preseason: t.NullC;
            Postseason: t.NullC;
        }>;
        year: t.StringC;
    }>> | t.ArrayC<t.IntersectionC<[t.TypeC<{
        playerId: t.RefinementC<t.NumberC>;
        firstName: t.StringC;
        lastName: t.StringC;
        rookieYear: t.RefinementC<t.NumberC>;
        lastYear: t.RefinementC<t.NumberC>;
        birthDate: types.DateFromISOStringC;
        status: t.StringC;
        profileUrl: t.StringC;
        fullName: t.StringC;
        team: t.KeyofC<{
            ATL: t.NullC;
            PHI: t.NullC;
            MIA: t.NullC;
            DET: t.NullC;
            BKN: t.NullC;
            PHX: t.NullC;
            MIL: t.NullC;
            GSW: t.NullC;
            BOS: t.NullC;
            POR: t.NullC;
            MIN: t.NullC;
            HOU: t.NullC;
            CHA: t.NullC;
            SAC: t.NullC;
            NOP: t.NullC;
            IND: t.NullC;
            CHI: t.NullC;
            SAS: t.NullC;
            NYK: t.NullC;
            LAC: t.NullC;
            CLE: t.NullC;
            TOR: t.NullC;
            OKC: t.NullC;
            LAL: t.NullC;
            DAL: t.NullC;
            UTA: t.NullC;
            ORL: t.NullC;
            MEM: t.NullC;
            DEN: t.NullC;
            WAS: t.NullC;
        }>;
    }>, t.PartialC<{}>]>> | t.ArrayC<t.TypeC<{
        playerId: t.RefinementC<t.NumberC>;
        min: t.RefinementC<t.NumberC>;
        fgm: t.RefinementC<t.NumberC>;
        fga: t.RefinementC<t.NumberC>;
        tpm: t.RefinementC<t.NumberC>;
        tpa: t.RefinementC<t.NumberC>;
        ftm: t.RefinementC<t.NumberC>;
        fta: t.RefinementC<t.NumberC>;
        plusminus: t.RefinementC<t.NumberC>;
        off: t.RefinementC<t.NumberC>;
        deff: t.RefinementC<t.NumberC>;
        tot: t.RefinementC<t.NumberC>;
        ast: t.RefinementC<t.NumberC>;
        pf: t.RefinementC<t.NumberC>;
        st: t.RefinementC<t.NumberC>;
        to: t.RefinementC<t.NumberC>;
        bs: t.RefinementC<t.NumberC>;
        pts: t.RefinementC<t.NumberC>;
    }>> | t.TypeC<{
        seasonYear: t.StringC;
        seasonPhase: t.KeyofC<{
            Regular: t.NullC;
            Preseason: t.NullC;
            Postseason: t.NullC;
        }>;
        version: t.RefinementC<t.NumberC>;
        lastUpdated: types.DateFromISOStringC;
    }>)[];
}
export {};
