import * as t from 'io-ts';
export declare const ExchangeSpotTradesTypes: {
    bitfinex: {
        data: t.RefinementC<t.IntersectionC<[t.TypeC<{
            price: t.NumberC;
            quantity: t.NumberC;
        }>, t.TypeC<{
            eventTime: t.RefinementC<t.NumberC>;
            tradeId: t.NumberC;
        }>]>>;
        snapshot: t.ArrayC<t.IntersectionC<[t.TypeC<{
            price: t.NumberC;
            quantity: t.NumberC;
        }>, t.TypeC<{
            eventTime: t.RefinementC<t.NumberC>;
            tradeId: t.NumberC;
        }>]>>;
    };
    coinbase: {
        data: t.RefinementC<t.IntersectionC<[t.TypeC<{
            price: t.NumberC;
            quantity: t.NumberC;
        }>, t.TypeC<{
            buyerId: t.StringC;
            marketMaker: t.BooleanC;
            sellerId: t.StringC;
            symbol: t.StringC;
            tradeId: t.NumberC;
            tradeTime: t.RefinementC<t.NumberC>;
        }>]>>;
        snapshot: t.ArrayC<t.IntersectionC<[t.TypeC<{
            price: t.NumberC;
            quantity: t.NumberC;
        }>, t.TypeC<{
            buyerId: t.StringC;
            marketMaker: t.BooleanC;
            sellerId: t.StringC;
            symbol: t.StringC;
            tradeId: t.NumberC;
            tradeTime: t.RefinementC<t.NumberC>;
        }>]>>;
    };
    binance: {
        data: t.RefinementC<t.IntersectionC<[t.TypeC<{
            price: t.NumberC;
            quantity: t.NumberC;
        }>, t.TypeC<{
            buyerId: t.StringC;
            eventTime: t.RefinementC<t.NumberC>;
            marketMaker: t.BooleanC;
            sellerId: t.StringC;
            symbol: t.StringC;
            tradeId: t.NumberC;
            tradeTime: t.RefinementC<t.NumberC>;
        }>]>>;
        snapshot: t.ArrayC<t.IntersectionC<[t.TypeC<{
            price: t.NumberC;
            quantity: t.NumberC;
        }>, t.TypeC<{
            buyerId: t.StringC;
            eventTime: t.RefinementC<t.NumberC>;
            marketMaker: t.BooleanC;
            sellerId: t.StringC;
            symbol: t.StringC;
            tradeId: t.NumberC;
            tradeTime: t.RefinementC<t.NumberC>;
        }>]>>;
    };
    gemini: {
        data: t.RefinementC<t.IntersectionC<[t.TypeC<{
            price: t.NumberC;
            quantity: t.NumberC;
        }>, t.TypeC<{
            marketMaker: t.BooleanC;
            tradeId: t.NumberC;
            tradeTime: t.RefinementC<t.NumberC>;
        }>]>>;
        snapshot: t.ArrayC<t.IntersectionC<[t.TypeC<{
            price: t.NumberC;
            quantity: t.NumberC;
        }>, t.TypeC<{
            marketMaker: t.BooleanC;
            tradeId: t.NumberC;
            tradeTime: t.RefinementC<t.NumberC>;
        }>]>>;
    };
    bitstamp: {
        data: t.RefinementC<t.IntersectionC<[t.TypeC<{
            price: t.NumberC;
            quantity: t.NumberC;
        }>, t.TypeC<{
            buyerId: t.StringC;
            marketMaker: t.BooleanC;
            sellerId: t.StringC;
            tradeId: t.NumberC;
        }>]>>;
        snapshot: t.ArrayC<t.IntersectionC<[t.TypeC<{
            price: t.NumberC;
            quantity: t.NumberC;
        }>, t.TypeC<{
            buyerId: t.StringC;
            marketMaker: t.BooleanC;
            sellerId: t.StringC;
            tradeId: t.NumberC;
        }>]>>;
    };
    kraken: {
        data: t.RefinementC<t.IntersectionC<[t.TypeC<{
            price: t.NumberC;
            quantity: t.NumberC;
        }>, t.TypeC<{
            eventTime: t.RefinementC<t.NumberC>;
            marketMaker: t.BooleanC;
            symbol: t.StringC;
            tradeTime: t.RefinementC<t.NumberC>;
        }>]>>;
        snapshot: t.ArrayC<t.IntersectionC<[t.TypeC<{
            price: t.NumberC;
            quantity: t.NumberC;
        }>, t.TypeC<{
            eventTime: t.RefinementC<t.NumberC>;
            marketMaker: t.BooleanC;
            symbol: t.StringC;
            tradeTime: t.RefinementC<t.NumberC>;
        }>]>>;
    };
    bitmex: {
        data: t.TypeC<{}>;
        snapshot: t.ArrayC<t.TypeC<{}>>;
    };
};
export declare const ALL_SPOT_TRADES_DATA_TYPES: (t.RefinementC<t.IntersectionC<[t.TypeC<{
    price: t.NumberC;
    quantity: t.NumberC;
}>, t.TypeC<{
    eventTime: t.RefinementC<t.NumberC>;
    tradeId: t.NumberC;
}>]>> | t.RefinementC<t.IntersectionC<[t.TypeC<{
    price: t.NumberC;
    quantity: t.NumberC;
}>, t.TypeC<{
    buyerId: t.StringC;
    marketMaker: t.BooleanC;
    sellerId: t.StringC;
    symbol: t.StringC;
    tradeId: t.NumberC;
    tradeTime: t.RefinementC<t.NumberC>;
}>]>> | t.RefinementC<t.IntersectionC<[t.TypeC<{
    price: t.NumberC;
    quantity: t.NumberC;
}>, t.TypeC<{
    buyerId: t.StringC;
    eventTime: t.RefinementC<t.NumberC>;
    marketMaker: t.BooleanC;
    sellerId: t.StringC;
    symbol: t.StringC;
    tradeId: t.NumberC;
    tradeTime: t.RefinementC<t.NumberC>;
}>]>> | t.RefinementC<t.IntersectionC<[t.TypeC<{
    price: t.NumberC;
    quantity: t.NumberC;
}>, t.TypeC<{
    marketMaker: t.BooleanC;
    tradeId: t.NumberC;
    tradeTime: t.RefinementC<t.NumberC>;
}>]>> | t.RefinementC<t.IntersectionC<[t.TypeC<{
    price: t.NumberC;
    quantity: t.NumberC;
}>, t.TypeC<{
    buyerId: t.StringC;
    marketMaker: t.BooleanC;
    sellerId: t.StringC;
    tradeId: t.NumberC;
}>]>> | t.RefinementC<t.IntersectionC<[t.TypeC<{
    price: t.NumberC;
    quantity: t.NumberC;
}>, t.TypeC<{
    eventTime: t.RefinementC<t.NumberC>;
    marketMaker: t.BooleanC;
    symbol: t.StringC;
    tradeTime: t.RefinementC<t.NumberC>;
}>]>>)[];
