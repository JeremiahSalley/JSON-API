"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var t = __importStar(require("io-ts"));
var symbols_1 = require("../common/symbols");
var CommonBookFields = t.intersection([
    t.type({}),
    t.partial({
        price: t.number,
        /**
         * Only present if subscribing to perpetual futures
         */
        maturation: t.Integer,
    }),
]);
var KrakenFuturesBookFields = t.intersection([
    CommonBookFields,
    t.type({
        eventTime: t.Integer,
        symbol: symbols_1.ExchangeSymbols.kraken.futures,
        quantityTotal: t.number,
    }),
]);
var BitmexFuturesBookFields = t.intersection([
    CommonBookFields,
    t.type({
        symbol: symbols_1.ExchangeSymbols.bitmex.futures,
        orderId: t.Integer,
        quantityChange: t.number,
    }),
]);
exports.ExchangeFuturesBooksTypes = {
    kraken: {
        data: t.refinement(KrakenFuturesBookFields, function () { return true; }, 'KrakenFuturesBooksDataType'),
        snapshot: t.array(KrakenFuturesBookFields, 'KrakenFuturesBooksDataType'),
    },
    bitmex: {
        data: t.refinement(BitmexFuturesBookFields, function () { return true; }, 'BitmexFuturesBooksDatatype'),
        snapshot: t.array(BitmexFuturesBookFields, 'BitmexFuturesBooksSnapshot'),
    },
};
exports.ALL_FUTURES_BOOKS_DATA_TYPES = [
    exports.ExchangeFuturesBooksTypes.kraken.data,
    exports.ExchangeFuturesBooksTypes.bitmex.data,
];
