import * as t from 'io-ts';
import { BitcoinNetwork, LightningApi } from '../lightning';
import { NflTeamType } from '../types/nfl';
export declare type StatType = 'passing' | 'rushing' | 'receiving' | 'defense';
export declare type SeasonPhase = 'preseason' | 'regular' | 'postseason';
export interface NflStatsByNameWeekRequestArgs<S extends StatType> {
    /** Defaults to mainnet */
    network?: BitcoinNetwork;
    statType: S;
    year: number;
    week: number;
    seasonPhase: SeasonPhase;
    firstName: string;
    lastName: string;
}
export interface NflStatsByIdRequestArgs<S extends StatType> {
    /** Defaults to mainnet */
    network?: BitcoinNetwork;
    statType: S;
    gameId: string;
    playerId: string;
}
export declare type NflGamesRequestArgs = NflRealtimeGames | NflHistoricalGames;
interface NflRealtimeGames {
    /** Defaults to mainnet */
    network?: BitcoinNetwork;
    realtime: true;
    teamId?: NflTeamType;
}
interface NflHistoricalGames {
    /** Defaults to mainnet */
    network?: BitcoinNetwork;
    realtime?: false;
    week: number;
    year: number;
    seasonPhase: SeasonPhase;
    teamId?: NflTeamType;
}
export interface NflPlayersRequestArgs {
    /** Defaults to mainnet */
    network?: BitcoinNetwork;
    firstName: string;
    lastName: string;
}
interface NflTeamRequestArgs {
    /** Defaults to mainnet */
    network?: BitcoinNetwork;
    teamId: NflTeamType;
    year?: number;
}
export declare const NflRestAPI: (lightning: LightningApi) => {
    games: ({ network, ...args }: NflGamesRequestArgs) => Promise<{
        gsisId: string;
        gameKey: string;
        startTime: Date;
        week: string;
        dayOfWeek: "Monday" | "Tuesday" | "Wednesday" | "Wednesda" | "Thursday" | "Friday" | "Saturday" | "Sunday";
        seasonYear: number;
        seasonType: "Regular" | "Preseason" | "Postseason";
        finished: boolean;
        homeTeam: {
            team: string;
            score: number;
            scoreQ1: number;
            scoreQ2: number;
            scoreQ3: number;
            scoreQ4: number;
            turnovers: number;
        };
        awayTeam: {
            team: string;
            score: number;
            scoreQ1: number;
            scoreQ2: number;
            scoreQ3: number;
            scoreQ4: number;
            turnovers: number;
        };
        timeInserted: Date;
        timeUpdate: Date;
    }[]>;
    players: ({ firstName, lastName, network }: NflPlayersRequestArgs) => Promise<({
        playerId: string;
        gsisName: string;
        fullName: string;
        firstName: string;
        lastName: string;
        team: "ATL" | "PHI" | "MIA" | "DET" | "MIN" | "HOU" | "IND" | "CHI" | "CLE" | "DAL" | "DEN" | "WAS" | "ARI" | "LA" | "BAL" | "BUF" | "NE" | "CAR" | "NO" | "NYG" | "CIN" | "NYJ" | "OAK" | "PIT" | "SD" | "GB" | "SEA" | "SF" | "TB" | "JAC" | "TEN" | "KC" | "UNK";
        position: string;
        profileId: number;
        profileUrl: string;
        college: string;
        height: number;
        weight: number;
        status: string;
    } & {
        birthDate?: string | undefined;
        yearsPro?: number | undefined;
    })[]>;
    roster: ({ teamId, year, network }: NflTeamRequestArgs) => Promise<({
        playerId: string;
        gsisName: string;
        fullName: string;
        firstName: string;
        lastName: string;
        team: "ATL" | "PHI" | "MIA" | "DET" | "MIN" | "HOU" | "IND" | "CHI" | "CLE" | "DAL" | "DEN" | "WAS" | "ARI" | "LA" | "BAL" | "BUF" | "NE" | "CAR" | "NO" | "NYG" | "CIN" | "NYJ" | "OAK" | "PIT" | "SD" | "GB" | "SEA" | "SF" | "TB" | "JAC" | "TEN" | "KC" | "UNK";
        position: string;
        profileId: number;
        profileUrl: string;
        college: string;
        height: number;
        weight: number;
        status: string;
    } & {
        birthDate?: string | undefined;
        yearsPro?: number | undefined;
    })[]>;
    schedule: ({ teamId, year, network }: NflTeamRequestArgs) => Promise<{
        gsisId: string;
        gameKey: string;
        startTime: Date;
        week: string;
        dayOfWeek: "Monday" | "Tuesday" | "Wednesday" | "Wednesda" | "Thursday" | "Friday" | "Saturday" | "Sunday";
        seasonYear: number;
        seasonType: "Regular" | "Preseason" | "Postseason";
        finished: boolean;
        homeTeam: {
            team: string;
            score: number;
            scoreQ1: number;
            scoreQ2: number;
            scoreQ3: number;
            scoreQ4: number;
            turnovers: number;
        };
        awayTeam: {
            team: string;
            score: number;
            scoreQ1: number;
            scoreQ2: number;
            scoreQ3: number;
            scoreQ4: number;
            turnovers: number;
        };
        timeInserted: Date;
        timeUpdate: Date;
    }[]>;
    statsById: <S extends StatType>({ gameId, playerId, network, statType, }: NflStatsByIdRequestArgs<S>) => Promise<{
        defense: t.ArrayC<t.TypeC<{
            assistedTackles: t.RefinementC<t.NumberC>;
            forcedFumbles: t.RefinementC<t.NumberC>;
            fgBlk: t.RefinementC<t.NumberC>;
            recoveredFumbles: t.RefinementC<t.NumberC>;
            recoveredFumbleTD: t.RefinementC<t.NumberC>;
            recoveredFumbleYds: t.RefinementC<t.NumberC>;
            defenseInt: t.RefinementC<t.NumberC>;
            intTds: t.RefinementC<t.NumberC>;
            intYds: t.RefinementC<t.NumberC>;
            miscTds: t.RefinementC<t.NumberC>;
            miscYds: t.RefinementC<t.NumberC>;
            passDef: t.RefinementC<t.NumberC>;
            punkBlk: t.RefinementC<t.NumberC>;
            qbHit: t.RefinementC<t.NumberC>;
            safety: t.RefinementC<t.NumberC>;
            defenseSack: t.RefinementC<t.NumberC>;
            defenseSackYds: t.RefinementC<t.NumberC>;
            tackle: t.RefinementC<t.NumberC>;
            tackleLoss: t.RefinementC<t.NumberC>;
            tackleLossYards: t.RefinementC<t.NumberC>;
            tacklePrimary: t.RefinementC<t.NumberC>;
            extraPointBlock: t.RefinementC<t.NumberC>;
        }>>;
        passing: t.ArrayC<t.TypeC<{
            att: t.RefinementC<t.NumberC>;
            cmp: t.RefinementC<t.NumberC>;
            cmpAirYds: t.RefinementC<t.NumberC>;
            inCmp: t.RefinementC<t.NumberC>;
            inCmpAirYds: t.RefinementC<t.NumberC>;
            passingInt: t.RefinementC<t.NumberC>;
            sack: t.RefinementC<t.NumberC>;
            sackYds: t.RefinementC<t.NumberC>;
            passingTds: t.RefinementC<t.NumberC>;
            passingTwoPointAttempt: t.RefinementC<t.NumberC>;
            passingTwoPointAttemptMade: t.RefinementC<t.NumberC>;
            passingTwoPointAttemptMissed: t.RefinementC<t.NumberC>;
            passingYds: t.RefinementC<t.NumberC>;
        }>>;
        receiving: t.ArrayC<t.TypeC<{
            rec: t.RefinementC<t.NumberC>;
            target: t.RefinementC<t.NumberC>;
            tds: t.RefinementC<t.NumberC>;
            receivingTwoPointAttempt: t.RefinementC<t.NumberC>;
            receivingTwoPointAttemptMade: t.RefinementC<t.NumberC>;
            receivingTwoPointAttemptMissed: t.RefinementC<t.NumberC>;
            yacYds: t.RefinementC<t.NumberC>;
            receivingYds: t.RefinementC<t.NumberC>;
            fumblesLost: t.RefinementC<t.NumberC>;
        }>>;
        rushing: t.ArrayC<t.TypeC<{
            attempt: t.RefinementC<t.NumberC>;
            loss: t.RefinementC<t.NumberC>;
            lossYds: t.RefinementC<t.NumberC>;
            tds: t.RefinementC<t.NumberC>;
            rushingTwoPointAttempt: t.RefinementC<t.NumberC>;
            rushingTwoPointAttemptMade: t.RefinementC<t.NumberC>;
            rushingTwoPointAttemptMissed: t.RefinementC<t.NumberC>;
            rushingYds: t.RefinementC<t.NumberC>;
            fumblesLost: t.RefinementC<t.NumberC>;
        }>>;
    }[S]["_A"]>;
    statsByName: <S extends StatType>({ firstName, lastName, seasonPhase, statType, week, year, network, }: NflStatsByNameWeekRequestArgs<S>) => Promise<{
        defense: t.ArrayC<t.TypeC<{
            assistedTackles: t.RefinementC<t.NumberC>;
            forcedFumbles: t.RefinementC<t.NumberC>;
            fgBlk: t.RefinementC<t.NumberC>;
            recoveredFumbles: t.RefinementC<t.NumberC>;
            recoveredFumbleTD: t.RefinementC<t.NumberC>;
            recoveredFumbleYds: t.RefinementC<t.NumberC>;
            defenseInt: t.RefinementC<t.NumberC>;
            intTds: t.RefinementC<t.NumberC>;
            intYds: t.RefinementC<t.NumberC>;
            miscTds: t.RefinementC<t.NumberC>;
            miscYds: t.RefinementC<t.NumberC>;
            passDef: t.RefinementC<t.NumberC>;
            punkBlk: t.RefinementC<t.NumberC>;
            qbHit: t.RefinementC<t.NumberC>;
            safety: t.RefinementC<t.NumberC>;
            defenseSack: t.RefinementC<t.NumberC>;
            defenseSackYds: t.RefinementC<t.NumberC>;
            tackle: t.RefinementC<t.NumberC>;
            tackleLoss: t.RefinementC<t.NumberC>;
            tackleLossYards: t.RefinementC<t.NumberC>;
            tacklePrimary: t.RefinementC<t.NumberC>;
            extraPointBlock: t.RefinementC<t.NumberC>;
        }>>;
        passing: t.ArrayC<t.TypeC<{
            att: t.RefinementC<t.NumberC>;
            cmp: t.RefinementC<t.NumberC>;
            cmpAirYds: t.RefinementC<t.NumberC>;
            inCmp: t.RefinementC<t.NumberC>;
            inCmpAirYds: t.RefinementC<t.NumberC>;
            passingInt: t.RefinementC<t.NumberC>;
            sack: t.RefinementC<t.NumberC>;
            sackYds: t.RefinementC<t.NumberC>;
            passingTds: t.RefinementC<t.NumberC>;
            passingTwoPointAttempt: t.RefinementC<t.NumberC>;
            passingTwoPointAttemptMade: t.RefinementC<t.NumberC>;
            passingTwoPointAttemptMissed: t.RefinementC<t.NumberC>;
            passingYds: t.RefinementC<t.NumberC>;
        }>>;
        receiving: t.ArrayC<t.TypeC<{
            rec: t.RefinementC<t.NumberC>;
            target: t.RefinementC<t.NumberC>;
            tds: t.RefinementC<t.NumberC>;
            receivingTwoPointAttempt: t.RefinementC<t.NumberC>;
            receivingTwoPointAttemptMade: t.RefinementC<t.NumberC>;
            receivingTwoPointAttemptMissed: t.RefinementC<t.NumberC>;
            yacYds: t.RefinementC<t.NumberC>;
            receivingYds: t.RefinementC<t.NumberC>;
            fumblesLost: t.RefinementC<t.NumberC>;
        }>>;
        rushing: t.ArrayC<t.TypeC<{
            attempt: t.RefinementC<t.NumberC>;
            loss: t.RefinementC<t.NumberC>;
            lossYds: t.RefinementC<t.NumberC>;
            tds: t.RefinementC<t.NumberC>;
            rushingTwoPointAttempt: t.RefinementC<t.NumberC>;
            rushingTwoPointAttemptMade: t.RefinementC<t.NumberC>;
            rushingTwoPointAttemptMissed: t.RefinementC<t.NumberC>;
            rushingYds: t.RefinementC<t.NumberC>;
            fumblesLost: t.RefinementC<t.NumberC>;
        }>>;
    }[S]["_A"]>;
};
export {};
