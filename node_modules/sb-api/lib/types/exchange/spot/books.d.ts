import * as t from 'io-ts';
export declare const ExchangeSpotBooksTypes: {
    bitfinex: {
        data: t.RefinementC<t.IntersectionC<[t.TypeC<{
            price: t.NumberC;
        }>, t.TypeC<{
            eventTime: t.NumberC;
            orderId: t.NumberC;
            quantityTotal: t.NumberC;
        }>]>>;
        snapshot: t.ArrayC<t.IntersectionC<[t.TypeC<{
            price: t.NumberC;
        }>, t.TypeC<{
            eventTime: t.NumberC;
            orderId: t.NumberC;
            quantityTotal: t.NumberC;
        }>]>>;
    };
    binance: {
        data: t.RefinementC<t.IntersectionC<[t.TypeC<{
            price: t.NumberC;
        }>, t.TypeC<{
            eventTime: t.RefinementC<t.NumberC>;
            quantityTotal: t.NumberC;
            symbol: t.KeyofC<{
                BTCUSDT: t.NullC;
                ETHBTC: t.NullC;
                ETHUSDT: t.NullC;
            }>;
        }>]>>;
        snapshot: t.ArrayC<t.IntersectionC<[t.TypeC<{
            price: t.NumberC;
        }>, t.TypeC<{
            eventTime: t.RefinementC<t.NumberC>;
            quantityTotal: t.NumberC;
            symbol: t.KeyofC<{
                BTCUSDT: t.NullC;
                ETHBTC: t.NullC;
                ETHUSDT: t.NullC;
            }>;
        }>]>>;
    };
    coinbase: {
        data: t.RefinementC<t.IntersectionC<[t.TypeC<{
            price: t.NumberC;
        }>, t.TypeC<{
            symbol: t.KeyofC<{
                ETHBTC: t.NullC;
                BTCUSD: t.NullC;
                ETHUSD: t.NullC;
            }>;
            quantityTotal: t.NumberC;
        }>]>>;
        snapshot: t.ArrayC<t.IntersectionC<[t.TypeC<{
            price: t.NumberC;
        }>, t.TypeC<{
            symbol: t.KeyofC<{
                ETHBTC: t.NullC;
                BTCUSD: t.NullC;
                ETHUSD: t.NullC;
            }>;
            quantityTotal: t.NumberC;
        }>]>>;
    };
    gemini: {
        data: t.RefinementC<t.IntersectionC<[t.TypeC<{
            price: t.NumberC;
        }>, t.TypeC<{
            eventTime: t.RefinementC<t.NumberC>;
            quantityChange: t.NumberC;
            quantityTotal: t.NumberC;
        }>]>>;
        snapshot: t.ArrayC<t.IntersectionC<[t.TypeC<{
            price: t.NumberC;
        }>, t.TypeC<{
            eventTime: t.RefinementC<t.NumberC>;
            quantityChange: t.NumberC;
            quantityTotal: t.NumberC;
        }>]>>;
    };
    bitstamp: {
        data: t.RefinementC<t.IntersectionC<[t.TypeC<{
            price: t.NumberC;
        }>, t.TypeC<{
            eventTime: t.RefinementC<t.NumberC>;
            orderId: t.RefinementC<t.NumberC>;
            quantityChange: t.NumberC;
        }>]>>;
        snapshot: t.ArrayC<t.IntersectionC<[t.TypeC<{
            price: t.NumberC;
        }>, t.TypeC<{
            eventTime: t.RefinementC<t.NumberC>;
            orderId: t.RefinementC<t.NumberC>;
            quantityChange: t.NumberC;
        }>]>>;
    };
    kraken: {
        data: t.RefinementC<t.TypeC<{}>>;
        snapshot: t.ArrayC<t.TypeC<{}>>;
    };
    bitmex: {
        data: t.TypeC<{}>;
        snapshot: t.ArrayC<t.TypeC<{}>>;
    };
};
export declare const ALL_SPOT_BOOKS_DATA_TYPES: (t.RefinementC<t.IntersectionC<[t.TypeC<{
    price: t.NumberC;
}>, t.TypeC<{
    eventTime: t.NumberC;
    orderId: t.NumberC;
    quantityTotal: t.NumberC;
}>]>> | t.RefinementC<t.IntersectionC<[t.TypeC<{
    price: t.NumberC;
}>, t.TypeC<{
    eventTime: t.RefinementC<t.NumberC>;
    quantityTotal: t.NumberC;
    symbol: t.KeyofC<{
        BTCUSDT: t.NullC;
        ETHBTC: t.NullC;
        ETHUSDT: t.NullC;
    }>;
}>]>> | t.RefinementC<t.IntersectionC<[t.TypeC<{
    price: t.NumberC;
}>, t.TypeC<{
    symbol: t.KeyofC<{
        ETHBTC: t.NullC;
        BTCUSD: t.NullC;
        ETHUSD: t.NullC;
    }>;
    quantityTotal: t.NumberC;
}>]>> | t.RefinementC<t.IntersectionC<[t.TypeC<{
    price: t.NumberC;
}>, t.TypeC<{
    eventTime: t.RefinementC<t.NumberC>;
    quantityChange: t.NumberC;
    quantityTotal: t.NumberC;
}>]>> | t.RefinementC<t.IntersectionC<[t.TypeC<{
    price: t.NumberC;
}>, t.TypeC<{
    eventTime: t.RefinementC<t.NumberC>;
    orderId: t.RefinementC<t.NumberC>;
    quantityChange: t.NumberC;
}>]>> | t.RefinementC<t.TypeC<{}>>)[];
