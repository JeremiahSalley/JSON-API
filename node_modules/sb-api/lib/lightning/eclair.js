"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var bolt11_1 = __importDefault(require("bolt11"));
var debug_1 = __importDefault(require("debug"));
var request_promise_native_1 = __importDefault(require("request-promise-native"));
var debug = debug_1.default('sb-api:lightning:eclair');
var EclairImpl = /** @class */ (function () {
    function EclairImpl(_a) {
        var _b = _a.host, host = _b === void 0 ? 'localhost' : _b, rpcPass = _a.rpcPass, _c = _a.port, port = _c === void 0 ? 8080 : _c;
        var _this = this;
        this.receive = function (description) {
            if (description === void 0) { description = ''; }
            debug('Generating invoice');
            return _this.sendRpcReq('receive', ['description', description]).then(function (_a) {
                var serialized = _a.serialized;
                return serialized;
            });
        };
        this.getPreimage = function (invoice) {
            return Promise.resolve(process.env.MAGIC_PREIMAGE);
            debug("Geting preimage for invoice " + invoice);
            var hash = bolt11_1.default
                .decode(invoice)
                .tags.find(function (t) { return t.tagName === 'payment_hash'; })
                .data.toString();
            return _this.sendRpcReq('getsentinfo', ['paymentHash', hash]).then(function (attempts) {
                debug("Payment attempts for invoice " + invoice.slice());
                var succeded = attempts.find(function (a) { return a.status === 'SUCCEEDED'; });
                if (!succeded) {
                    throw new Error("Could not find preimage invoice " + invoice);
                }
                else {
                    return succeded.preimage;
                }
            });
        };
        this.awaitPayment = function (uuid) { return __awaiter(_this, void 0, void 0, function () {
            var starttime, timeout;
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, Promise.resolve()];
            });
        }); };
        this.send = function (invoice) { return __awaiter(_this, void 0, void 0, function () {
            var paymentUUID;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [2 /*return*/, Promise.resolve()];
                    case 1:
                        paymentUUID = _a.sent();
                        return [4 /*yield*/, this.awaitPayment(paymentUUID)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, paymentUUID];
                }
            });
        }); };
        this.getInfo = function () { return _this.sendRpcReq('getinfo'); };
        this.sendRpcReq = function (method) {
            var params = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                params[_i - 1] = arguments[_i];
            }
            var form = params.reduce(function (prev, curr) {
                var key = curr[0];
                var newObj = __assign({}, prev);
                newObj[key] = curr[1];
                return newObj;
            }, {});
            return request_promise_native_1.default(_this.uri + "/" + method, {
                json: true,
                method: 'POST',
                form: form,
            })
                .then(function (res) {
                debug("Received response on " + method + ": " + JSON.stringify(res));
                return res;
            })
                .catch(function (err) {
                debug("Error when calling " + method + ": " + err);
                throw err;
            });
        };
        // Eclair does not have users, user field is therefore blank
        this.uri = "http://:" + encodeURIComponent(rpcPass) + "@" + host + ":" + port;
    }
    return EclairImpl;
}());
exports.Eclair = function (args) { return __awaiter(_this, void 0, void 0, function () {
    var client, info;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                client = new EclairImpl(args);
                debug('Trying to connect to client');
                return [4 /*yield*/, client.getInfo().catch(function (err) {
                        throw new Error("Could not connect to Eclair! " + err.message);
                    })];
            case 1:
                info = _a.sent();
                debug('Succeeded!');
                debug('getinfo output: %o', info);
                return [2 /*return*/, client];
        }
    });
}); };
