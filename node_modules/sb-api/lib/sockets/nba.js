"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var lightning_1 = require("../lightning");
var nba_1 = require("../types/nba");
var common_1 = require("./common");
var paypercall_1 = require("./paypercall");
var NbaSocket = /** @class */ (function (_super) {
    __extends(NbaSocket, _super);
    function NbaSocket(ln, onOpen) {
        var _this = _super.call(this, common_1.API.NBA, ln, onOpen, lightning_1.BitcoinNetwork.mainnet) || this;
        _this.info = function () { return _this.sendRequest({ channel: 'info' }, nba_1.NbaTypes.InfoType, 'NBA info'); };
        _this.games = function (args) {
            return _this.sendRequest(__assign({}, args, { channel: 'games' }), nba_1.NbaTypes.GamesResponseType, 'NBA games');
        };
        _this.players = function (args) {
            return _this.sendRequest(__assign({}, args, { channel: 'players' }), nba_1.NbaTypes.PlayersResponseType, 'NBA players');
        };
        _this.schedule = function (args) {
            return _this.sendRequest(__assign({}, args, { channel: 'team', retrieve: 'schedule' }), nba_1.NbaTypes.TeamScheduleResponseType, 'NBA schedule');
        };
        _this.roster = function (args) {
            return _this.sendRequest(__assign({}, args, { channel: 'team', retrieve: 'roster' }), nba_1.NbaTypes.TeamRosterResponseType, 'NBA roster');
        };
        _this.statsById = function (args) {
            return _this.sendRequest(__assign({}, args, { channel: 'stats' }), nba_1.NbaTypes.StatsResponseType, 'NBA stats by ID');
        };
        _this.statsByName = function (args) {
            return _this.sendRequest(__assign({}, args, { channel: 'stats' }), nba_1.NbaTypes.StatsResponseType, 'NBA stats by name, week and year');
        };
        return _this;
    }
    return NbaSocket;
}(paypercall_1.PayPerCallSocket));
exports.NbaSocket = NbaSocket;
var NbaSocketTestnet = /** @class */ (function (_super) {
    __extends(NbaSocketTestnet, _super);
    function NbaSocketTestnet(ln, onOpen) {
        var _this = _super.call(this, common_1.API.NBA, ln, onOpen, lightning_1.BitcoinNetwork.testnet) || this;
        _this.info = function () {
            return _this.sendRequest({ channel: 'info' }, nba_1.NbaTypes.InfoType, 'NBA info - testnet');
        };
        _this.games = function (args) {
            return _this.sendRequest(__assign({}, args, { channel: 'games' }), nba_1.NbaTypes.GamesResponseType, 'NBA games testnet');
        };
        _this.players = function (args) {
            if (args === void 0) { args = {}; }
            return _this.sendRequest(__assign({}, args, { channel: 'players' }, testnetVals), nba_1.NbaTypes.PlayersResponseType, 'NBA players testnet');
        };
        _this.schedule = function (args) {
            return _this.sendRequest(__assign({}, args, { channel: 'team', retrieve: 'schedule' }, testnetVals), nba_1.NbaTypes.TeamScheduleResponseType, 'NBA schedule testnet');
        };
        _this.roster = function (args) {
            return _this.sendRequest(__assign({}, args, { channel: 'team', retrieve: 'roster' }, testnetVals), nba_1.NbaTypes.TeamRosterResponseType, 'NBA roster testnet');
        };
        _this.statsById = function (args) {
            return _this.sendRequest(__assign({}, args, { channel: 'stats' }), nba_1.NbaTypes.StatsResponseType, 'NBA stats by ID');
        };
        _this.statsByName = function (args) {
            return _this.sendRequest(__assign({}, args, { channel: 'stats' }), nba_1.NbaTypes.StatsResponseType, 'NBA stats by name, week and year');
        };
        return _this;
    }
    return NbaSocketTestnet;
}(paypercall_1.PayPerCallSocket));
exports.NbaSocketTestnet = NbaSocketTestnet;
var testnetVals = {
    firstName: 'Lebron',
    lastName: 'James',
};
