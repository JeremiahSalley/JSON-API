"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var assert_never_1 = __importDefault(require("assert-never"));
var nfl_1 = require("../types/nfl");
var rest_1 = require("./rest");
var getBaseURL = function (network) {
    if (network === 'mainnet') {
        return 'https://api.suredbits.com/nfl/v0';
    }
    else if (network === 'testnet') {
        return 'https://test.api.suredbits.com/nfl/v0';
    }
    else {
        return assert_never_1.default(network);
    }
};
exports.NflRestAPI = function (lightning) { return ({
    games: function (_a) { return __awaiter(_this, void 0, void 0, function () {
        var unfiltered, filtered;
        var _b = _a.network, network = _b === void 0 ? 'mainnet' : _b, args = __rest(_a, ["network"]);
        return __generator(this, function (_c) {
            unfiltered = args.realtime
                ? [args.realtime, args.teamId]
                : [args.week, args.seasonPhase, args.year, args.teamId];
            filtered = unfiltered.filter(function (arg) { return arg !== undefined; });
            return [2 /*return*/, rest_1.makeRestRequest(lightning, getBaseURL(network) + ("/games/" + filtered.join('/')), nfl_1.NflTypes.GamesResponseType)];
        });
    }); },
    players: function (_a) {
        var firstName = _a.firstName, lastName = _a.lastName, _b = _a.network, network = _b === void 0 ? 'mainnet' : _b;
        return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_c) {
                return [2 /*return*/, rest_1.makeRestRequest(lightning, getBaseURL(network) + ("/players/" + lastName + "/" + firstName), nfl_1.NflTypes.PlayersResponseType)];
            });
        });
    },
    roster: function (_a) {
        var teamId = _a.teamId, year = _a.year, _b = _a.network, network = _b === void 0 ? 'mainnet' : _b;
        return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_c) {
                return [2 /*return*/, rest_1.makeRestRequest(lightning, getBaseURL(network) + '/team/' + [teamId, 'roster', year].filter(function (f) { return f !== undefined; }).join('/'), nfl_1.NflTypes.TeamRosterResponseType)];
            });
        });
    },
    schedule: function (_a) {
        var teamId = _a.teamId, year = _a.year, _b = _a.network, network = _b === void 0 ? 'mainnet' : _b;
        return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_c) {
                return [2 /*return*/, rest_1.makeRestRequest(lightning, getBaseURL(network) + '/team/' + [teamId, 'schedule', year].filter(function (f) { return f !== undefined; }).join('/'), nfl_1.NflTypes.TeamScheduleResponseType)];
            });
        });
    },
    statsById: function (_a) {
        var gameId = _a.gameId, playerId = _a.playerId, _b = _a.network, network = _b === void 0 ? 'mainnet' : _b, statType = _a.statType;
        return __awaiter(_this, void 0, void 0, function () {
            var filteredArgs, executeReq;
            return __generator(this, function (_c) {
                filteredArgs = ['/stats', statType, gameId, playerId].filter(function (e) { return e !== undefined; });
                executeReq = function (type) {
                    return rest_1.makeRestRequest(lightning, getBaseURL(network) + filteredArgs.join('/'), type);
                };
                if (statType === 'defense') {
                    return [2 /*return*/, executeReq(nfl_1.NflTypes.StatsResponsesByType.defense)];
                }
                else if (statType === 'passing') {
                    return [2 /*return*/, executeReq(nfl_1.NflTypes.StatsResponsesByType.passing)];
                }
                else if (statType === 'receiving') {
                    return [2 /*return*/, executeReq(nfl_1.NflTypes.StatsResponsesByType.receiving)];
                }
                else if (statType === 'rushing') {
                    return [2 /*return*/, executeReq(nfl_1.NflTypes.StatsResponsesByType.rushing)];
                }
                else {
                    // for some reason the exhaustiveness check breaks down here, because
                    // of a generic parameter of statType. this is happening even though
                    // all four cases are covered above. would be nice to get rid of this
                    // cast, but I'm not sure how to do that...
                    return [2 /*return*/, assert_never_1.default(statType)];
                }
                return [2 /*return*/];
            });
        });
    },
    statsByName: function (_a) {
        var firstName = _a.firstName, lastName = _a.lastName, seasonPhase = _a.seasonPhase, statType = _a.statType, week = _a.week, year = _a.year, _b = _a.network, network = _b === void 0 ? 'mainnet' : _b;
        return __awaiter(_this, void 0, void 0, function () {
            var args, executeReq;
            return __generator(this, function (_c) {
                args = ['/stats', statType, year, week, seasonPhase, lastName, firstName];
                executeReq = function (type) { return rest_1.makeRestRequest(lightning, getBaseURL(network) + args.join('/'), type); };
                if (statType === 'defense') {
                    return [2 /*return*/, executeReq(nfl_1.NflTypes.StatsResponsesByType.defense)];
                }
                else if (statType === 'passing') {
                    return [2 /*return*/, executeReq(nfl_1.NflTypes.StatsResponsesByType.passing)];
                }
                else if (statType === 'receiving') {
                    return [2 /*return*/, executeReq(nfl_1.NflTypes.StatsResponsesByType.receiving)];
                }
                else if (statType === 'rushing') {
                    return [2 /*return*/, executeReq(nfl_1.NflTypes.StatsResponsesByType.rushing)];
                }
                else {
                    // for some reason the exhaustiveness check breaks down here, because
                    // of a generic parameter of statType. this is happening even though
                    // all four cases are covered above. would be nice to get rid of this
                    // cast, but I'm not sure how to do that...
                    return [2 /*return*/, assert_never_1.default(statType)];
                }
                return [2 /*return*/];
            });
        });
    },
}); };
