"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var t = __importStar(require("io-ts"));
var BinanceSymbols = t.keyof({
    BTCUSDT: t.null,
    ETHBTC: t.null,
    ETHUSDT: t.null,
});
var KrakenSpotSymbols = t.keyof({
    ETHBTC: t.null,
    BTCUSD: t.null,
    ETHUSD: t.null,
});
var KrakenFuturesSymbols = t.keyof({
    BTCUSD: t.null,
    ETHUSD: t.null,
});
var BitmexSpotSymbols = t.keyof({ shouldNotAppear: t.null });
var BitmexFuturesSymbols = t.keyof({
    BTCUSD: t.null,
    ETHUSD: t.null,
    ETHBTC: t.null,
});
var BitfinexSymbols = t.keyof({
    ETHBTC: t.null,
    BTCUSD: t.null,
    ETHUSD: t.null,
});
var CoinbaseSymbols = t.keyof({
    ETHBTC: t.null,
    BTCUSD: t.null,
    ETHUSD: t.null,
});
var BitstampSymbols = t.keyof({
    ETHBTC: t.null,
    BTCUSD: t.null,
    ETHUSD: t.null,
});
var GeminiSymbols = t.keyof({
    BTCUSD: t.null,
});
exports.ExchangeSymbols = {
    binance: BinanceSymbols,
    bitfinex: BitfinexSymbols,
    coinbase: CoinbaseSymbols,
    gemini: GeminiSymbols,
    bitstamp: BitstampSymbols,
    kraken: {
        spot: KrakenSpotSymbols,
        futures: KrakenFuturesSymbols,
    },
    bitmex: {
        spot: BitmexSpotSymbols,
        futures: BitmexFuturesSymbols,
    },
};
