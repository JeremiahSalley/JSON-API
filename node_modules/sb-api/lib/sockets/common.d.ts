import WebSocket from 'ws';
import { BitcoinNetwork, LightningApi } from '../lightning';
import { WelcomeMessageType } from '../types';
export declare type OnWsOpen = (msg: WelcomeMessageType) => any;
export declare enum API {
    NBA = "nba",
    spot = "spot",
    futures = "futures"
}
export interface AtleastUUID {
    uuid: string;
}
export declare type MaybeUUID = Partial<AtleastUUID>;
export declare abstract class SbWebSocket {
    protected api: API;
    protected ln: LightningApi;
    private network;
    url: string;
    private closePromiseResolver;
    close: () => Promise<void>;
    protected ws: WebSocket;
    private getApiUrl;
    constructor(api: API, ln: LightningApi, onOpen: OnWsOpen, network: BitcoinNetwork);
    protected abstract handleMessage(uuid: string, parsed: AtleastUUID, data: WebSocket.Data): Promise<any>;
}
