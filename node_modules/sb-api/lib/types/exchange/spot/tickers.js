"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var t = __importStar(require("io-ts"));
var CommonSpotTickerFields = t.type({
    bid: t.number,
    ask: t.number,
    symbol: t.string,
    volume: t.number,
});
var GeminiSpotTickerFields = t.intersection([CommonSpotTickerFields, t.type({ statCloseTime: t.Integer })]);
var BitstampSpotTickerFields = t.intersection([
    CommonSpotTickerFields,
    t.type({
        eventTime: t.Integer,
        weightedAvePrice: t.number,
        ask: t.number,
        open: t.number,
        high: t.number,
        low: t.number,
    }),
]);
var CoinbaseSpotTickerFields = t.intersection([
    CommonSpotTickerFields,
    t.type({
        eventTime: t.Integer,
        open: t.number,
        high: t.number,
        low: t.number,
        lastTradeId: t.Integer,
    }),
]);
var BinanceSpotTickerFields = t.intersection([
    CommonSpotTickerFields,
    t.type({
        askSize: t.number,
        bidSize: t.number,
        close: t.number,
        closeQuantity: t.number,
        eventTime: t.Integer,
        firstTradeId: t.Integer,
        high: t.number,
        lastTradeId: t.Integer,
        low: t.number,
        open: t.number,
        prevClose: t.number,
        priceChange: t.number,
        priceChangePerc: t.number,
        quoteVolume: t.number,
        statCloseTime: t.number,
        statOpenTime: t.number,
        weightedAvePrice: t.number,
    }),
]);
var BitfinexSpotTickerFields = t.intersection([
    CommonSpotTickerFields,
    t.type({
        eventTime: t.Integer,
        priceChange: t.number,
        priceChangePerc: t.number,
        close: t.number,
        bidSize: t.number,
        askSize: t.number,
        high: t.number,
        low: t.number,
    }),
]);
var KrakenSpotTickerFields = t.intersection([
    CommonSpotTickerFields,
    t.type({
        askSize: t.number,
        bidSize: t.number,
        close: t.number,
        closeQuantity: t.number,
        eventTime: t.Integer,
        high: t.number,
        low: t.number,
        open: t.number,
        statCloseTime: t.number,
        statOpenTime: t.number,
        totalTrades: t.Integer,
        weightedAvePrice: t.number,
    }),
]);
exports.ExchangeSpotTickersTypes = {
    binance: {
        data: t.refinement(BinanceSpotTickerFields, function () { return true; }, 'BinanceSpotTickersDataType'),
        snapshot: t.array(BinanceSpotTickerFields, 'BinanceSpotTickersSnapshotType'),
    },
    bitfinex: {
        data: t.refinement(BitfinexSpotTickerFields, function () { return true; }, 'BitfinexSpotTickersDataType'),
        snapshot: t.array(BitfinexSpotTickerFields, 'BitfinexSpotTickersSnapshotType'),
    },
    coinbase: {
        data: t.refinement(CoinbaseSpotTickerFields, function () { return true; }, 'CoinbaseSpotTickersDataType'),
        snapshot: t.array(CoinbaseSpotTickerFields, 'CoinbaseSpotTickersSnapshotType'),
    },
    gemini: {
        data: t.refinement(GeminiSpotTickerFields, function () { return true; }, 'GeminiSpotTickersDataType'),
        snapshot: t.array(GeminiSpotTickerFields, 'GeminiSpotTickersSnapshotType'),
    },
    bitstamp: {
        data: t.refinement(BitstampSpotTickerFields, function () { return true; }, 'BitstampSpotTickersDataType'),
        snapshot: t.array(BitstampSpotTickerFields, 'BitstampSpotTickersSnapshotType'),
    },
    kraken: {
        data: t.refinement(KrakenSpotTickerFields, function () { return true; }, 'KrakenSpotTickersDataType'),
        snapshot: t.array(KrakenSpotTickerFields, 'KrakenSpotTickersSnapshotType'),
    },
    bitmex: {
        data: t.type({}),
        snapshot: t.array(t.type({})),
    },
};
exports.ALL_SPOT_TICKERS_DATA_TYPES = [
    exports.ExchangeSpotTickersTypes.bitfinex.data,
    exports.ExchangeSpotTickersTypes.coinbase.data,
    exports.ExchangeSpotTickersTypes.binance.data,
    exports.ExchangeSpotTickersTypes.gemini.data,
    exports.ExchangeSpotTickersTypes.bitstamp.data,
    exports.ExchangeSpotTickersTypes.kraken.data,
];
