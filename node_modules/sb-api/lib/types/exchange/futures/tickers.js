"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var t = __importStar(require("io-ts"));
var symbols_1 = require("../common/symbols");
var common_1 = require("./common");
var CommonTickersFields = t.intersection([
    t.type({
        ask: t.number,
        bid: t.number,
        eventTime: t.Integer,
        index: t.number,
        last: t.number,
        leverage: t.string,
        maturationInterval: common_1.MaturationIntervalType,
        markPrice: t.number,
        openInterest: t.number,
        priceChange: t.number,
        volume: t.number,
    }),
    t.partial({
        /**
         * Only present if subscribing to perpetual contracts
         */
        maturationTime: t.Int,
        /**
         * Only present if subscribing to perpetual contracts
         */
        nextFundingRateTime: t.number,
        /**
         * Only present if subscribing to perpetual contracts
         */
        fundingRate: t.number,
        /**
         * Only present if subscribing to perpetual contracts
         */
        fundingRatePrediction: t.number,
    }),
]);
var KrakenFuturesTickersFields = t.intersection([
    CommonTickersFields,
    t.type({
        askSize: t.number,
        bidSize: t.number,
        premium: t.number,
        // statCloseTime: t.Integer,
        // statOpenTime: t.Integer,
        symbol: symbols_1.ExchangeSymbols.kraken.futures,
    }),
]);
var BitmexTickersFuturesFields = t.intersection([
    CommonTickersFields,
    t.type({
        symbol: symbols_1.ExchangeSymbols.bitmex.futures,
        low: t.number,
        high: t.number,
        volWeightedAvePrice: t.number,
    }),
]);
exports.ExchangeFuturesTickersTypes = {
    kraken: {
        data: t.refinement(KrakenFuturesTickersFields, function () { return true; }, 'KrakenFuturesTickersDataType'),
        snapshot: t.array(KrakenFuturesTickersFields, 'KrakenFuturesTickersSnapshotType'),
    },
    bitmex: {
        data: t.refinement(BitmexTickersFuturesFields, function () { return true; }, 'BitmexFuturesTickersDataType'),
        snapshot: t.array(BitmexTickersFuturesFields, 'BitmexFuturesTickersSnapshot'),
    },
};
exports.ALL_FUTURES_TICKERS_DATA_TYPES = [
    exports.ExchangeFuturesTickersTypes.kraken.data,
    exports.ExchangeFuturesTickersTypes.bitmex.data,
];
